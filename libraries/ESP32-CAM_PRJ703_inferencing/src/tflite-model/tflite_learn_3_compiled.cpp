/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 21.04.2025 01:59:48

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242656;
#else
constexpr int kTensorArenaSize = 241632;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[3] = { 11694, -17982, -18301, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00051622593309730291, 0.00033568052458576858, 0.0003334235807415098, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 73,-59,108,-28,-127,-55,-8,66,-40,45,15,42,-13,-56,72,-15,-3,49,71,89,14,-73,47,-61,-66,70,-30,19,56,107,-3,60, 
  /* [1][0][][] */ 27,-54,-63,-10,-25,95,0,-16,127,-57,6,-52,-51,98,19,-47,67,-39,-28,-118,-105,5,91,67,4,3,15,-5,-50,-88,-21,-58, 
  /* [2][0][][] */ -39,44,-69,68,63,-38,-9,75,99,27,122,-10,-85,-51,64,101,-90,-37,-9,-99,50,104,-77,-66,81,-40,1,-127,8,-101,77,-22, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0049162204377353191, 0.0031968164257705212, 0.0031753226649016142, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { -536, -181, -708, -581, -542, -556, -1506, 56, -900, -52, -309, 894, -1203, -776, -1346, -339, -186, -1001, -789, -1268, -822, -673, -1469, -517, -1177, -1102, -1099, -763, -1326, 777, -963, -965, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.9723817937774584e-05, 5.8474546676734462e-05, 4.8609523219056427e-05, 5.9531903389142826e-05, 6.1079241277184337e-05, 5.7201486924896017e-05, 5.3963904065312818e-05, 5.9210909967077896e-05, 6.6611086367629468e-05, 5.9523215895751491e-05, 6.6245193011127412e-05, 0.00012299894297029823, 5.1527582400012761e-05, 5.9175421483814716e-05, 5.18550950801e-05, 5.1973631343571469e-05, 4.6842076699249446e-05, 6.3281513575930148e-05, 5.0332906539551914e-05, 5.0638322136364877e-05, 5.8986654039472342e-05, 6.6414351749699563e-05, 5.3967105486663058e-05, 6.1552345869131386e-05, 5.0354443374089897e-05, 4.9939095333684236e-05, 5.2508476073853672e-05, 6.4626023231539875e-05, 5.1990471547469497e-05, 9.441901056561619e-05, 5.160331420483999e-05, 9.7969001217279583e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -50,-47,77,-10,90,-24,-91,-113,39,-105,-108,-26,22,-8,-42,33,-64,-32,-79,-52,-85,-104,-11,78,-95,0,54,-58,77,-28,-34,-94,100,-56,-94,53,-112,-66,-113,11,57,-92,-104,68,55,-111,77,-32,13,-69,-61,63,-84,-26,-96,81,3,42,62,-107,-88,57,-48,25,-51,-2,47,67,40,63,47,-125,71,-64,32,58,-109,-3,-67,51,31,2,55,-25,-65,-49,-91,69,3,90,-21,-127,-4,34,3,-2, 
  /* [1][0][][] */ -74,5,-56,-4,-78,56,28,10,74,-127,-82,70,41,-21,5,53,59,-24,27,63,-45,-7,27,15,57,-15,-38,74,-5,-10,69,-56,61,81,-12,-3,35,25,-35,-41,-66,5,-27,-86,-35,22,-53,-39,-12,-77,42,31,13,45,-65,-70,24,79,24,66,-62,79,-72,-48,-56,33,54,34,64,12,2,4,-94,31,-55,29,79,-34,-31,43,-58,52,-51,-81,9,61,-43,-52,37,39,74,-1,34,60,29,-4, 
  /* [2][0][][] */ 82,86,-79,62,-43,-75,53,70,-109,123,-50,67,64,-31,55,-123,-72,-37,-3,22,-96,-36,81,-4,-49,42,74,-24,-93,43,91,120,-45,-9,-114,-43,-99,86,79,-49,-109,-90,-3,-5,-88,127,-4,-94,88,-1,122,-92,-72,106,6,23,-81,72,-71,-21,31,23,-47,59,82,22,20,52,-114,57,-7,-90,28,-84,21,5,-73,-42,-21,17,9,-100,-17,-17,-13,-91,-37,-47,60,97,-57,-4,-61,-94,-8,-43, 
  /* [3][0][][] */ 16,-21,19,-33,-89,17,-90,11,19,-9,34,-20,68,57,41,-9,66,60,-40,-10,76,-73,-59,-93,-43,-86,-65,71,29,-68,51,-19,-60,-44,-10,-34,-77,-38,2,26,-37,-79,-83,-14,33,5,-73,-75,34,-63,-9,-2,63,-7,56,-84,-101,-118,-108,-55,-86,15,-45,55,-1,-40,-55,-33,-43,-68,-1,64,1,-100,21,-48,28,59,59,-76,-74,-102,33,55,9,21,-45,-99,-64,17,-7,-127,56,-60,-78,13, 
  /* [4][0][][] */ -14,47,-18,26,-46,-21,22,1,72,14,-24,68,-20,-36,-41,-35,-37,11,-48,9,55,-71,59,11,41,-27,48,-42,-32,-35,-62,-59,100,81,43,-97,-34,-32,-127,27,-54,-39,-71,-92,10,54,-18,31,22,-42,-90,-58,-50,1,-102,-65,37,-73,19,22,-17,-47,-54,-37,-53,51,-2,-37,7,-86,-67,-58,-31,-22,47,30,83,-17,-6,-47,11,-25,-122,-23,-26,14,64,-8,-106,-76,50,-2,-2,26,-100,-27, 
  /* [5][0][][] */ 65,-117,42,55,86,-97,22,17,63,-114,-4,-92,21,60,11,21,37,36,-81,55,22,29,1,-30,-112,-10,-2,-77,34,28,-3,-115,-22,-7,-24,-63,-94,-36,-53,25,-72,-36,3,46,-28,-10,22,-46,-89,80,22,41,29,-25,21,-37,83,50,-23,-34,46,-79,41,-65,-20,52,-28,41,86,-34,60,-34,-44,88,-53,-72,-3,-52,7,-2,71,55,11,80,-77,58,-19,7,43,-96,66,52,4,24,31,-127, 
  /* [6][0][][] */ -18,-68,57,29,-86,-79,-34,23,-42,-97,-26,-103,47,10,59,-126,-1,-32,-29,54,-95,-127,53,14,-80,-97,-41,-79,-54,-113,2,-84,-105,-126,-68,-113,-41,1,-110,32,38,12,-14,-45,-121,54,-102,-68,-100,-14,0,-81,14,-64,45,-54,-23,-31,-77,57,-103,-31,22,-90,-62,23,47,-70,38,-35,-117,-36,14,-86,-103,-65,-90,-114,-77,-52,-6,-54,1,-51,-89,-102,-64,-103,34,45,45,-8,-73,-81,38,-50, 
  /* [7][0][][] */ 6,23,-36,-21,-54,68,-3,-10,101,-55,-74,-5,34,-51,24,57,29,23,-8,65,40,32,0,63,-23,89,33,40,-60,63,-24,15,47,20,74,46,-78,48,-18,-5,52,-46,48,24,27,-20,41,-75,44,-57,-127,-73,-17,22,17,20,81,-62,3,-35,25,-1,-1,-70,-74,-42,56,28,-74,-5,56,72,56,21,31,39,-17,45,-66,23,74,-22,-1,-72,54,2,-63,64,59,-17,69,-16,-61,-9,-15,-49, 
  /* [8][0][][] */ -25,-20,-58,-66,104,7,-46,-33,13,-37,19,26,5,-41,-87,-53,-70,58,-62,1,17,-27,37,57,-75,103,31,33,-51,14,-87,32,92,-31,84,-51,60,-22,-62,60,29,69,-112,-127,-18,-57,-39,63,0,-64,-63,5,-48,-47,-32,-108,15,88,-34,65,105,10,21,68,-8,-54,-24,87,-25,1,20,20,33,76,-28,-14,-25,52,51,19,16,72,-80,-69,-17,4,40,-47,12,-62,-61,43,-50,-39,-45,-8, 
  /* [9][0][][] */ -14,-7,87,38,13,-67,-34,-61,35,26,-6,41,2,-63,-66,-24,11,-9,-47,-26,19,72,-85,-72,66,-17,-12,22,8,-14,-68,101,14,-10,15,-26,-62,12,12,-33,34,-59,51,-64,64,20,-77,45,29,16,-14,-24,64,-72,-24,82,73,-57,12,-12,-74,84,63,-59,-37,12,75,31,3,75,90,-75,-6,43,-76,-70,-43,-93,-29,63,30,-8,107,23,-29,-69,12,12,84,34,-10,127,68,30,90,-26, 
  /* [10][0][][] */ -127,27,42,-41,-18,68,75,10,41,-32,2,-59,58,51,-43,9,-39,58,-64,-50,-16,18,34,-52,42,38,-73,-77,-36,36,-75,-72,83,61,106,17,-32,-15,-39,29,-44,80,-92,-63,-73,-66,-49,-41,-1,-9,-19,-12,39,-40,-43,-53,-70,-10,24,-27,11,58,7,37,53,-53,-63,-8,10,-37,-49,-36,50,29,-67,62,16,39,42,0,51,1,28,42,-84,14,71,-25,13,-22,0,-87,-74,6,-37,-70, 
  /* [11][0][][] */ 32,118,14,71,15,9,23,22,54,76,-21,34,68,10,35,49,12,-27,84,29,30,44,26,-27,11,-55,-4,37,51,-15,69,8,-29,-11,-4,127,-14,49,21,-27,10,44,41,29,14,-15,-38,-26,64,34,19,4,37,-34,22,12,-14,-11,-23,-5,-19,47,14,14,-6,75,0,13,3,105,9,-10,59,16,-16,51,17,30,-14,43,-32,-16,2,-19,62,-26,30,19,-28,52,13,-47,-29,40,-39,78, 
  /* [12][0][][] */ 22,34,-76,-25,48,-19,-57,0,-88,14,-38,-14,-58,-15,12,-94,-113,-53,-77,-92,-4,-37,-15,53,-85,-68,54,-116,46,-16,-60,83,-100,-81,-65,-8,-34,-85,-42,8,72,7,-119,-63,-43,-95,-48,70,-67,-127,-18,61,-4,-9,-97,52,-46,-70,22,26,37,66,-29,10,81,1,-67,71,18,60,6,35,47,69,-38,-35,-59,0,-125,-96,-77,61,9,-9,-59,0,17,72,-107,-117,48,18,57,-45,3,45, 
  /* [13][0][][] */ 100,-61,61,44,127,61,48,19,22,-95,4,-38,70,30,33,-46,-94,-68,-68,2,40,-35,68,-46,-75,61,0,-2,-69,-60,46,-14,28,56,1,-5,-70,-24,-84,50,-48,47,-62,-6,-34,-4,9,-34,17,71,-23,-63,-74,15,58,-80,-40,38,0,-63,-8,62,-26,-9,-14,-76,-82,75,4,-40,55,4,-63,62,-66,-48,-100,30,49,-65,21,-51,55,13,-75,-70,45,59,-21,-54,-71,27,106,-53,32,-57, 
  /* [14][0][][] */ -76,-111,41,29,35,-57,-43,-125,-95,-65,29,35,-26,-99,-103,-106,-78,-79,-23,-7,-66,-3,-38,20,-121,-89,-62,-10,-127,-125,-100,5,58,-48,-57,-25,42,70,-3,-121,-32,-122,0,43,29,-121,26,-97,65,7,41,13,45,-40,-41,-16,-78,5,33,44,-40,-97,-55,24,-103,-39,33,-116,-104,-102,-108,48,-23,42,12,-96,10,-125,15,3,8,-45,-125,-64,-127,-105,-121,58,60,-19,43,-72,39,53,-40,29, 
  /* [15][0][][] */ -47,-48,-35,58,41,-63,55,-80,72,-75,-73,11,82,4,-95,-89,49,20,-85,32,31,15,61,86,103,44,28,76,4,36,42,-87,33,7,-40,-40,-57,72,75,-51,-9,98,-62,-52,7,-86,-77,-67,0,-79,-67,9,-87,-127,-51,-28,52,45,-48,97,-45,-49,-41,97,-52,85,-58,5,-70,-14,51,-58,1,-51,28,-95,21,47,88,54,-58,38,-86,-64,-118,-67,-66,29,54,19,-89,-16,5,108,-91,85, 
  /* [16][0][][] */ -52,11,97,-63,85,92,-53,15,2,94,-87,28,-3,-52,-40,-57,111,53,62,43,100,69,-44,43,-77,87,-55,50,-82,25,46,-19,-127,54,53,60,-35,59,-109,-57,36,-47,65,95,72,91,108,-14,-54,-86,35,115,-30,99,61,29,22,98,75,3,119,87,56,34,77,-8,-38,98,69,86,-32,4,37,119,60,64,-28,80,-104,-37,-1,-61,44,11,18,112,76,-4,72,21,-50,93,91,-39,-98,-14, 
  /* [17][0][][] */ 44,-28,-1,44,-34,-78,-71,-33,9,4,41,33,53,26,-94,7,-19,9,42,127,-89,-36,-17,-58,1,24,-79,-15,20,-54,-26,93,-33,-30,-1,56,-68,67,-30,-42,-76,-56,-38,-6,7,28,61,-101,38,43,56,-3,-59,53,90,-23,-90,33,-63,-108,41,-108,51,47,-74,-69,2,-87,-107,-7,38,-15,-3,-85,-56,23,32,-61,4,-49,-28,-3,-63,-52,-98,53,28,-19,-23,74,-108,-26,-20,43,77,19, 
  /* [18][0][][] */ -89,57,70,-88,-31,-101,-103,-6,-33,29,-111,-54,-17,12,35,-79,3,-47,35,18,76,-55,-1,-82,-4,-104,-31,78,10,55,-26,77,9,-54,-105,-118,-45,2,-20,42,-50,-25,-56,-25,-125,-17,38,-19,-15,-11,109,29,-108,-34,14,92,-60,19,-5,-127,43,77,2,13,-36,-117,-44,66,61,-79,-80,77,-108,-55,-86,-105,34,29,-17,-94,-59,-36,-30,-78,69,-41,33,81,-104,-75,-69,118,45,-37,77,0, 
  /* [19][0][][] */ 11,11,36,10,91,-87,55,49,55,0,2,-45,-97,6,-72,29,27,-110,57,40,-53,41,-75,-16,43,-92,-7,-91,-109,-116,-88,76,111,-86,4,11,-28,-68,-74,-110,18,-127,-95,-22,-89,2,60,-107,-52,13,14,27,-65,16,-9,-33,-12,63,45,-47,45,-63,87,35,-4,-27,-48,-25,-24,23,28,-78,-73,-109,-4,-94,-51,-123,-14,69,17,-114,-55,35,-101,-37,-18,-28,41,1,-29,103,-58,79,32,-63, 
  /* [20][0][][] */ -27,41,49,86,-127,72,-7,45,8,-21,-72,-25,-12,49,21,-58,-50,-63,-47,-26,2,-44,-79,-69,17,-78,-92,19,0,-4,-42,75,13,-6,-49,30,3,-41,-18,-92,-74,-52,-72,-80,-25,-56,-85,55,10,-97,-49,15,25,54,28,-24,41,49,53,38,62,-51,-61,-36,-37,-57,-53,-1,-79,-53,-52,22,-65,-82,3,1,64,32,57,74,43,-34,47,-14,33,72,-36,48,-4,52,-6,51,-9,14,8,25, 
  /* [21][0][][] */ 34,24,24,-78,116,-45,44,-6,9,-74,-64,27,5,11,-71,-61,-90,-14,19,-4,66,-44,39,-66,64,-48,-20,33,3,3,-22,-37,43,11,-25,-105,63,39,-127,-16,-28,8,-15,-47,-87,-80,-70,51,-14,-46,-65,75,21,32,-90,-29,-38,46,-16,80,49,-51,3,-1,39,15,-34,-36,-63,-32,41,65,17,-12,33,24,-43,-26,35,47,12,68,5,-55,-15,-91,43,-67,-79,16,68,-126,-34,-17,38,-43, 
  /* [22][0][][] */ -8,-78,-93,-104,70,-66,52,14,-104,35,-95,-112,76,-125,-127,-103,-4,33,-91,-80,37,-94,-10,-8,42,-38,-125,53,-75,-70,-86,-121,31,16,11,-24,-32,-47,-76,-125,-34,-44,-34,41,11,-127,38,-52,-81,-86,-19,-45,-78,-105,-73,-7,-36,-58,-47,-59,52,-96,-93,-117,-87,-19,-126,-61,58,48,-47,-34,-89,-29,17,-106,7,-76,17,46,50,-107,-91,-120,28,33,44,-59,-77,-9,-83,20,-19,-13,-59,45, 
  /* [23][0][][] */ 45,-64,-17,20,74,-88,-13,-94,11,-56,49,34,12,-86,0,-48,51,-39,-101,70,54,-69,59,-38,-29,-4,42,2,38,32,41,-39,-36,13,5,25,53,0,-127,-5,-77,-9,-10,-87,-47,-75,78,6,42,-83,-79,-57,46,-54,-40,65,-91,-21,81,17,-81,-84,-44,-28,38,8,-94,-89,37,-31,66,-52,-7,-15,-35,-86,18,-28,51,59,-57,-39,-3,-89,52,-4,57,-34,-74,16,59,-44,67,-39,-27,33, 
  /* [24][0][][] */ -82,-72,-120,-88,-93,-114,-88,-110,28,77,43,10,68,23,-62,-125,-99,10,-10,-52,53,-98,-76,-61,25,-50,33,18,62,29,-25,-65,-5,-18,17,-5,-75,-98,29,-48,-89,-114,59,-25,-8,-59,14,34,-95,-65,-43,-11,30,29,34,-92,-31,40,3,-27,49,-31,10,53,-97,55,-69,-106,-99,16,-78,-51,-60,18,56,56,27,-93,-119,-95,-97,-106,-84,-127,-27,25,-40,-109,-7,-119,-25,-67,-43,-5,-101,-1, 
  /* [25][0][][] */ -40,-56,-89,-19,83,-83,-120,37,22,-98,-58,1,41,-30,-127,-24,-78,19,13,-120,37,44,-32,-79,8,-45,-109,15,48,-101,19,85,79,-102,3,61,67,-61,-24,-29,-102,52,-105,-12,73,26,72,3,-112,58,-23,-21,24,-22,-76,-20,-31,75,-80,45,77,12,23,14,57,39,-44,-18,-98,-21,-42,-120,35,-114,61,-3,43,39,-13,5,20,50,-63,58,-88,-57,-107,-94,-41,-48,65,44,-118,-35,-44,-91, 
  /* [26][0][][] */ 20,-108,-43,-38,-86,-39,-34,-40,-116,-114,64,37,-91,-56,-19,-35,70,6,-92,-84,-12,36,61,-15,16,28,-15,14,-17,-22,-98,-45,-40,-61,-106,-92,-75,46,-71,68,-105,63,26,2,-88,36,-52,58,-40,-5,-17,46,-14,-36,-37,-120,55,52,25,1,-6,-103,30,-41,127,-46,-69,26,-102,46,55,58,62,-105,-79,-17,12,-107,-103,-9,-53,52,41,-88,38,-22,-53,-24,-94,66,-16,-15,-69,60,16,59, 
  /* [27][0][][] */ 14,-2,-61,-86,-98,18,-64,-29,9,125,7,-61,10,25,38,-39,51,-17,70,-6,-14,-10,-34,-34,-88,13,-79,-21,25,52,-26,-11,36,34,-63,-11,-75,-55,-94,41,-76,-4,4,-3,50,2,36,52,44,71,79,0,-9,-49,51,-3,116,-18,-33,-70,-42,13,-36,77,78,-50,-92,52,13,62,-21,18,46,-52,22,-76,35,-59,40,51,38,-32,127,-54,-67,-62,-39,1,19,-17,-42,2,19,77,105,88, 
  /* [28][0][][] */ 109,19,34,16,-51,-26,-112,-30,11,-55,16,35,-39,-103,-29,55,47,60,-48,96,-36,-12,-119,-93,-124,30,-49,-22,-67,-51,29,-30,-71,-16,36,83,-16,-118,-52,10,56,3,-98,11,-104,-29,-19,13,10,-32,-23,-59,-47,-5,29,74,73,-15,53,14,-2,-65,-72,26,19,36,-49,84,-35,4,-101,-52,25,33,-33,-113,-127,-84,-103,67,-18,-108,90,-36,21,-75,22,-88,-99,-81,-29,-27,-37,40,-51,-79, 
  /* [29][0][][] */ 24,69,40,-14,-127,25,-52,22,25,85,-20,-56,33,-36,8,6,-17,36,15,-38,-46,-5,34,15,-22,-33,-16,-18,-35,-19,86,66,-17,8,-89,25,8,81,30,46,58,43,23,87,32,89,1,1,17,-8,50,-45,43,-37,71,15,-14,25,-29,55,-94,51,-46,-46,-21,-5,32,20,27,-19,14,-61,74,3,58,29,55,-19,-13,16,2,-48,-59,-9,60,92,20,63,-26,85,24,36,-90,-12,9,57, 
  /* [30][0][][] */ -6,-85,-77,6,-82,6,-81,-37,73,-31,-30,-42,-83,-3,17,2,-25,6,77,-109,15,-109,-118,-15,-105,-7,-75,95,-11,-90,-93,-24,-70,-88,-105,-72,-5,-45,-22,1,44,-93,-40,52,55,-64,54,22,-75,62,12,-104,78,-68,-38,55,-69,-46,-69,-46,-101,-20,-84,-25,-107,-103,-100,66,-56,66,39,-44,-75,59,8,-89,-50,-79,-86,-71,-2,22,-97,-35,-116,-6,-100,64,-47,-127,60,30,-36,-24,-6,-70, 
  /* [31][0][][] */ 43,15,-2,35,-14,50,-55,7,-32,77,-51,-43,36,-92,-30,51,-37,-74,29,63,1,-15,-41,34,4,-80,-5,-2,-21,-41,27,82,-9,-1,-91,74,42,3,36,-67,42,-52,8,20,14,-7,0,14,23,16,77,15,-59,-42,16,29,-63,56,127,30,-55,23,44,-49,113,59,-52,-59,45,5,-62,-26,6,-32,60,-15,-34,-55,-9,29,-32,-48,-10,33,22,36,-62,31,-14,18,-53,13,-22,59,39,113, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0021132621914148331, 0.0024851681664586067, 0.0020659046713262796, 0.0025301058776676655, 0.0025958677288144827, 0.0024310632143169641, 0.0022934658918529749, 0.0025164636317640543, 0.0028309712652117014, 0.0025297366082668304, 0.0028154207393527031, 0.0052274549379944801, 0.002189922146499157, 0.0025149553548544645, 0.0022038414608687162, 0.002208879217505455, 0.0019907881505787373, 0.0026894642505794764, 0.0021391485352069139, 0.0021521286107599735, 0.0025069327093660831, 0.0028226098511368036, 0.0022936018649488688, 0.0026159745175391436, 0.0021400637924671173, 0.0021224115043878555, 0.0022316102404147387, 0.0027466060128062963, 0.002209594938904047, 0.0040128077380359173, 0.002193140797317028, 0.0041636824607849121, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { -2358, 4606, 8614, 2727, -4902, -4540, 15879, 2644, 2524, -2777, 15959, -1226, -10060, 2874, 22536, 8445, 16575, 6149, -5555, -5633, 4098, 24322, 26498, 20405, 1570, 833, 4501, 2485, 1914, -6693, 8843, -3702, -608, 3464, -261, 1188, 11407, 5098, -1395, 4258, 12417, 8046, 4297, 13172, 5924, 6596, 2247, 8614, 5069, -4342, -14271, -749, -351, -1454, 2182, 134, -5, -1596, -3662, 10276, -1476, 1496, -2400, -2280, -4264, 10673, 35079, 1498, -3493, 616, 1082, 2815, 3803, -1264, 576, 11243, -578, 19950, 17417, -1257, 11425, 3452, -142, 1308, 16407, 9425, 5512, 1683, 5805, 4517, -1434, -9042, 409, -2456, -1959, -1201, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00029236459522508085, 0.00034921546466648579, 0.00027135276468470693, 0.00030585171771235764, 0.00022752830409444869, 0.00033538596471771598, 0.00020033668261021376, 0.00024010684865061194, 0.0002120207209372893, 0.00022572194575332105, 0.00012098454317310825, 0.00017448802827857435, 0.0002648874360602349, 0.00095880491426214576, 0.00013957405462861061, 0.00014194287359714508, 0.00011634342081379145, 0.00022153354075271636, 0.00035659410059452057, 0.00030373054323717952, 0.0001246257743332535, 0.00011068689491366968, 0.0001104035327443853, 7.8425517131108791e-05, 0.00014413586177397519, 0.00047044031089171767, 0.00062177388463169336, 0.00040885360795073211, 0.00020844870596192777, 0.00031057861633598804, 0.00017989023763220757, 0.00022423888731282204, 0.00022052507847547531, 0.00030594147392548621, 0.00033263204386457801, 0.0003272801695857197, 0.00015652117144782096, 0.00020789657719433308, 0.00025201583048328757, 0.00038546544965356588, 0.0001072860904969275, 0.00030529985087923706, 0.00039701396599411964, 0.00018885376630350947, 0.0003707409487105906, 0.00018179659673478454, 0.00023927405709400773, 0.00022370344959199429, 0.00025075519806705415, 0.00030589223024435341, 0.00011084035941166803, 0.00013298096018843353, 0.0003247382992412895, 0.00024898300762288272, 0.00038736368878744543, 0.00032051821472123265, 0.00034508126555010676, 0.00026814383454620838, 0.00043835974065586925, 0.00017144734738394618, 0.00058803422143682837, 0.00040584814269095659, 0.00014169859059620649, 0.00043884452315978706, 0.00047145062126219273, 0.00017824555106926709, 6.2751059886068106e-05, 0.00018926414486486465, 0.00033953296951949596, 0.00043470988748595119, 0.000242733905906789, 0.00014075408398639411, 0.00033865441218949854, 0.00033755521872080863, 0.00029811420245096087, 0.00019015546422451735, 0.00024237543402705342, 8.9837551058735698e-05, 9.8264412372373044e-05, 0.00020280334865674376, 0.00011822563101304695, 7.7540389611385763e-05, 0.0001944432151503861, 0.00019484819495119154, 0.00011773189908126369, 0.00025813261163420975, 0.00040417819400317967, 0.00018682237714529037, 0.00010812225809786469, 0.00047074278700165451, 0.00018509196524973959, 0.00022209036978892982, 0.00020433356985449791, 0.00041811147821135819, 0.00033215893199667335, 0.00023817771580070257, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -50,127,8,-55,-24,-12,-15,-33,-78,-26,19,7,-23,-85,3,58, 
  /* [1][0][][] */ -20,19,-78,-1,-59,-24,52,-127,33,73,-77,-71,-8,-21,46,-119, 
  /* [2][0][][] */ 0,127,-29,-5,72,52,-30,-52,23,-56,-42,-49,-19,12,-80,34, 
  /* [3][0][][] */ 78,-2,-79,-127,23,-34,47,-57,61,51,66,52,89,-33,55,67, 
  /* [4][0][][] */ -34,91,-16,-20,22,-107,-49,17,-23,-106,6,27,-71,-30,28,127, 
  /* [5][0][][] */ 7,67,127,-13,18,78,-48,52,-96,81,-37,-72,32,-24,-124,-3, 
  /* [6][0][][] */ 0,-89,127,-26,40,22,-9,52,-57,-42,38,-38,-28,73,-7,121, 
  /* [7][0][][] */ -1,112,-37,-22,61,43,37,-83,58,127,-37,-11,38,-56,4,20, 
  /* [8][0][][] */ -24,-86,42,-72,39,-22,46,-25,17,34,92,-56,-32,127,89,87, 
  /* [9][0][][] */ -4,52,49,89,85,-14,90,-99,-127,122,16,-111,-25,-91,3,-56, 
  /* [10][0][][] */ 99,119,-56,-127,54,-7,-95,-33,16,-44,-3,-57,-17,-97,-91,1, 
  /* [11][0][][] */ -14,-22,44,-2,90,19,127,-8,-69,37,11,-27,-23,118,-36,19, 
  /* [12][0][][] */ 92,43,-73,-3,8,-27,29,9,9,126,-110,-87,6,127,-37,13, 
  /* [13][0][][] */ -4,-32,-2,10,9,-127,7,16,-1,-13,11,13,-5,3,-6,42, 
  /* [14][0][][] */ 92,57,14,2,14,5,-102,-127,-19,27,-26,13,63,-74,-72,-111, 
  /* [15][0][][] */ -38,101,12,-45,45,62,-18,-16,4,96,55,-72,92,92,-49,-127, 
  /* [16][0][][] */ 127,27,71,50,17,12,-27,-77,-25,29,-99,-11,23,-14,-59,-85, 
  /* [17][0][][] */ -50,-75,7,14,-38,-16,-49,62,-127,-53,11,-71,-26,54,68,13, 
  /* [18][0][][] */ 6,87,32,61,73,-1,4,-127,32,108,-55,-25,29,72,-15,-33, 
  /* [19][0][][] */ -10,-21,79,18,72,27,-57,-34,-89,-70,-2,-127,-54,-8,4,-3, 
  /* [20][0][][] */ 64,22,7,-14,42,-37,17,57,-82,-16,-127,-70,-33,18,28,61, 
  /* [21][0][][] */ 127,35,15,37,-8,8,-79,-33,11,-19,-25,43,81,46,-29,-57, 
  /* [22][0][][] */ -99,-15,0,82,8,18,112,127,-34,11,22,-13,-50,8,50,83, 
  /* [23][0][][] */ -8,-21,94,-70,127,16,44,33,-47,13,9,-38,-8,-22,-66,50, 
  /* [24][0][][] */ -127,-10,30,-20,-1,116,58,17,19,47,113,-22,-64,58,57,-35, 
  /* [25][0][][] */ 23,20,15,10,15,-24,21,-15,8,-127,-17,-3,-24,-16,12,57, 
  /* [26][0][][] */ -60,-9,-28,21,-64,-1,-22,-80,-127,19,-36,-30,-8,82,-85,41, 
  /* [27][0][][] */ -5,15,20,49,55,0,6,-17,49,8,-23,-18,3,127,-1,25, 
  /* [28][0][][] */ 40,65,68,43,127,14,0,-52,-64,45,-49,-38,64,81,-21,-104, 
  /* [29][0][][] */ 13,48,-10,19,-8,-7,-32,36,-32,9,-35,-127,31,-9,-38,3, 
  /* [30][0][][] */ -44,87,-78,23,-19,35,52,-127,-51,103,10,14,91,12,58,31, 
  /* [31][0][][] */ -2,-21,-65,-127,-15,-3,5,-103,-71,52,-49,-98,25,-100,33,5, 
  /* [32][0][][] */ -127,-68,4,54,35,30,11,54,-12,-34,-39,5,23,28,67,81, 
  /* [33][0][][] */ -44,-40,-10,-27,-12,54,-19,25,59,23,52,-90,15,-72,127,56, 
  /* [34][0][][] */ 8,-30,57,25,43,7,-6,80,-38,-56,50,4,-25,17,16,127, 
  /* [35][0][][] */ -19,42,21,28,-5,-54,-12,-26,65,31,-35,-46,-25,23,-11,-127, 
  /* [36][0][][] */ -13,8,52,24,95,68,127,27,-4,42,4,-23,-42,12,-33,-23, 
  /* [37][0][][] */ -18,-43,-6,-77,-6,55,11,-58,-51,55,19,-10,19,-127,36,-48, 
  /* [38][0][][] */ 106,-5,27,-66,127,-57,-12,-90,68,75,-8,70,16,-42,60,95, 
  /* [39][0][][] */ -25,74,-26,-127,5,25,-32,18,5,-66,-23,-15,0,20,27,43, 
  /* [40][0][][] */ 29,-19,32,-65,6,84,-16,-48,-110,64,-24,-66,10,-95,21,-127, 
  /* [41][0][][] */ -37,-48,-4,-28,38,24,63,15,-28,22,-24,-18,-127,14,30,73, 
  /* [42][0][][] */ 55,35,-12,19,-62,-16,-45,-1,18,41,45,-29,-15,36,35,-127, 
  /* [43][0][][] */ 12,127,-66,37,-35,-71,46,-9,33,41,-74,-38,45,-86,-16,-122, 
  /* [44][0][][] */ 46,21,22,-17,127,48,-42,-65,-28,47,6,-52,5,25,11,-95, 
  /* [45][0][][] */ -9,66,-127,-28,-13,-108,9,-14,22,39,-20,-60,62,-30,64,-65, 
  /* [46][0][][] */ 22,23,-19,-99,7,-4,39,-47,-118,-49,-2,17,-23,-127,62,-2, 
  /* [47][0][][] */ 23,63,30,-29,127,1,-6,21,-53,32,-1,11,-8,-5,97,-9, 
  /* [48][0][][] */ -77,-67,-45,6,44,43,45,-54,-37,47,-115,14,127,-18,34,24, 
  /* [49][0][][] */ 28,34,64,43,127,41,15,-14,-59,0,5,-73,22,62,8,-70, 
  /* [50][0][][] */ 50,-43,-127,-82,-23,-120,-67,-63,81,7,44,86,125,31,26,-42, 
  /* [51][0][][] */ -7,60,50,-1,56,-29,57,26,-127,28,-3,-105,15,-85,-9,93, 
  /* [52][0][][] */ -2,127,-11,65,15,-62,-46,26,93,74,-13,-100,53,116,12,-98, 
  /* [53][0][][] */ 33,9,-21,-20,-68,-30,-58,3,31,-41,-22,-41,12,-127,113,60, 
  /* [54][0][][] */ 52,-20,-46,-38,127,76,-27,-31,-36,42,9,29,28,-12,29,-15, 
  /* [55][0][][] */ 74,-38,-20,-29,-6,-61,-8,-127,2,-31,-10,41,18,-56,52,-5, 
  /* [56][0][][] */ -39,28,57,-25,14,-48,-127,97,-24,124,11,-67,20,10,-10,41, 
  /* [57][0][][] */ -14,70,-45,-57,43,-37,127,52,-14,-2,-52,-34,29,20,118,0, 
  /* [58][0][][] */ 22,19,-127,21,25,64,20,28,-89,-1,1,17,23,9,-28,-51, 
  /* [59][0][][] */ -98,31,74,3,-40,-1,127,100,10,44,24,-26,22,10,53,7, 
  /* [60][0][][] */ 20,10,0,20,26,-127,-47,8,-17,-72,9,-18,-22,-2,-2,62, 
  /* [61][0][][] */ 88,25,0,127,84,40,6,3,-74,37,-13,83,26,-6,25,-96, 
  /* [62][0][][] */ -45,109,70,-26,14,10,-19,61,-127,-50,-83,-106,-7,-53,-51,33, 
  /* [63][0][][] */ -7,51,-47,127,-43,25,-1,-8,-91,7,-40,-41,68,30,5,36, 
  /* [64][0][][] */ 7,9,-19,52,-13,57,15,35,31,36,-18,-49,31,-127,2,-53, 
  /* [65][0][][] */ -67,-111,-22,-51,29,44,61,-45,-50,127,2,-95,1,7,6,-72, 
  /* [66][0][][] */ 46,-48,2,5,-35,-4,-30,50,54,11,44,55,67,127,-29,-25, 
  /* [67][0][][] */ -12,87,-21,-104,9,-17,-70,23,45,-127,-42,-32,15,53,73,59, 
  /* [68][0][][] */ -25,74,127,-27,9,41,-31,6,-23,4,-10,-56,43,-25,90,-75, 
  /* [69][0][][] */ 127,25,-51,-7,-53,-43,-51,-66,0,8,29,-35,7,9,-4,-40, 
  /* [70][0][][] */ 80,46,-83,-44,-2,14,127,118,-57,79,-102,-26,1,13,-11,28, 
  /* [71][0][][] */ 30,11,-5,30,0,-77,12,-5,-56,27,-102,-12,-127,-16,25,62, 
  /* [72][0][][] */ -63,100,-127,-9,26,83,13,110,-44,42,28,-79,107,-14,-90,-68, 
  /* [73][0][][] */ -56,52,45,-16,49,-58,-91,-90,0,-127,36,-25,-32,-55,58,45, 
  /* [74][0][][] */ -26,40,44,127,-3,18,-71,34,-85,39,-28,-22,-6,-107,-9,-103, 
  /* [75][0][][] */ -15,-5,-30,6,32,67,68,-11,95,61,8,-26,35,127,-37,1, 
  /* [76][0][][] */ -24,-25,-21,26,-8,7,11,29,25,6,7,-127,20,-2,-22,-56, 
  /* [77][0][][] */ -12,26,24,91,-12,31,85,127,19,-19,23,-7,-53,14,5,58, 
  /* [78][0][][] */ -21,-21,60,-70,70,12,22,127,-11,-96,31,-64,-46,81,18,120, 
  /* [79][0][][] */ -25,-89,-22,-64,-19,-10,30,-17,127,-6,65,19,-15,67,76,-25, 
  /* [80][0][][] */ -54,61,109,-102,70,-17,22,-53,-89,-7,-20,-127,-23,53,57,42, 
  /* [81][0][][] */ -107,23,-121,22,127,-123,15,122,-16,-82,112,-40,-19,22,48,70, 
  /* [82][0][][] */ 69,-34,-5,14,6,-127,-38,-4,17,-37,-103,-12,89,2,14,40, 
  /* [83][0][][] */ -14,101,-89,-24,0,-35,45,-57,27,27,-52,-127,8,34,47,59, 
  /* [84][0][][] */ 46,35,1,-47,-13,-11,4,-127,12,67,-6,-3,73,-2,-28,-114, 
  /* [85][0][][] */ -41,127,17,-114,-28,16,-17,1,-37,-11,-32,-8,18,-5,-82,-22, 
  /* [86][0][][] */ 16,19,-53,-29,21,-37,127,-17,-7,-43,0,31,5,-5,127,24, 
  /* [87][0][][] */ -44,-8,-22,-127,0,-13,33,-8,15,40,-5,-104,15,-3,-28,-77, 
  /* [88][0][][] */ 109,28,74,-16,36,-71,-78,0,-55,-41,-127,-17,31,37,40,69, 
  /* [89][0][][] */ -19,-9,-56,-22,-4,9,-1,22,-32,22,19,-56,127,-13,-13,-73, 
  /* [90][0][][] */ -64,-66,6,-35,32,7,-9,127,72,-49,-19,-33,-18,118,-1,-109, 
  /* [91][0][][] */ -43,25,-1,7,38,21,-15,-47,4,66,-19,-127,0,30,-21,-15, 
  /* [92][0][][] */ 16,73,36,-3,21,-127,2,-17,15,-30,-29,-21,1,-52,11,9, 
  /* [93][0][][] */ 17,-9,127,-4,-51,44,47,-54,1,27,-50,-5,-34,-30,49,7, 
  /* [94][0][][] */ 54,-13,-40,-59,30,8,19,2,-8,-36,1,-43,127,-46,29,-46, 
  /* [95][0][][] */ 127,18,-34,-12,-42,-48,-64,-70,-33,-5,75,7,-18,-57,69,-24, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00067548890365287662, 0.00080683903070166707, 0.00062694249209016562, 0.00070665002567693591, 0.00052568898536264896, 0.00077488686656579375, 0.00046286455471999943, 0.00055475084809586406, 0.00048985972534865141, 0.00052151549607515335, 0.00027952672098763287, 0.00040314294165000319, 0.0006120047764852643, 0.0022152548190206289, 0.00032247655326500535, 0.00032794955768622458, 0.0002688037056941539, 0.00051183847244828939, 0.0008238868904300034, 0.00070174917345866561, 0.00028793953242711723, 0.00025573468883521855, 0.00025507999816909432, 0.00018119692686013877, 0.00033301630173809826, 0.001086920965462923, 0.0014365670504048467, 0.00094462902052327991, 0.0004816068394575268, 0.00071757117984816432, 0.00041562438127584755, 0.00051808898570016026, 0.00050950847798958421, 0.00070685736136510968, 0.00076852412894368172, 0.00075615901732817292, 0.00036163174081593752, 0.00048033116036094725, 0.00058226578403264284, 0.00089059222955256701, 0.00024787735310383141, 0.00070537492865696549, 0.00091727427206933498, 0.00043633402674458921, 0.00085657223826274276, 0.00042002889676950872, 0.00055282673565670848, 0.00051685189828276634, 0.00057935313088819385, 0.00070674356538802385, 0.00025608926080167294, 0.00030724363750778139, 0.00075028615538030863, 0.00057525862939655781, 0.00089497794397175312, 0.00074053596472367644, 0.0007972872699610889, 0.00061952846590429544, 0.0010128009598702192, 0.00039611765532754362, 0.0013586138375103474, 0.0009376850794069469, 0.00032738514710217714, 0.0010139209916815162, 0.0010892552090808749, 0.00041182446875609457, 0.0001449821429559961, 0.00043728217133320868, 0.00078446825500577688, 0.0010043681832030416, 0.00056082051014527678, 0.00032520291279070079, 0.00078243843745440245, 0.00077989883720874786, 0.00068877299781888723, 0.00043934150016866624, 0.00055999227333813906, 0.00020756367302965373, 0.00022703336435370147, 0.00046856360859237611, 0.00027315242914482951, 0.0001791519025573507, 0.00044924809481017292, 0.00045018375385552645, 0.00027201170451007783, 0.00059639819664880633, 0.0009338267263956368, 0.00043164062662981451, 0.00024980926536954939, 0.0010876198066398501, 0.000427642633439973, 0.00051312497816979885, 0.00047209908370859921, 0.00096601864788681269, 0.00076743104727938771, 0.00055029371287673712, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { -18245, 25065, -14715, -14224, 8078, -12422, 11950, -22756, 9498, -10558, 29132, 15285, -11032, -4915, -67, 8721, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00048917671665549278, 0.00035147782182320952, 0.00016906362725421786, 0.00028259030659683049, 0.00029627713956870139, 0.00019431191321928054, 0.00037398064159788191, 0.00017192907398566604, 0.00019259966211393476, 0.00026767989038489759, 0.00042168924119323492, 0.0004278049455024302, 0.00024726992705836892, 0.000181947136297822, 0.00057354581076651812, 0.0004363938351161778, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -26,-24,89,-28,-1,5,-15,40,20,-6,17,50,11,-6,-28,-10,-13,-24,1,-14,25,-3,-26,17,-9,39,-6,127,18,-12,70,-16,-2,9,26,-6,-6,-15,1,-3,70,-29,25,54,4,14,-11,-21,41,-6,44,37,5,-23,-17,103,-48,4,-40,-50,-9,58,54,77,-14,-50,1,50,36,-3,7,-14,-2,-36,19,16,-69,5,13,5,11,13,37,43,20,-17,48,-83,-5,-4,6,17,88,-59,-102,39, 
  /* [1][0][][] */ -17,-95,45,-79,35,4,47,11,-46,-18,27,16,48,-6,-54,-5,-104,25,34,26,29,55,-32,-36,-24,42,-70,-51,-7,18,-51,12,-5,42,0,-36,8,10,-30,2,-64,-1,-11,-38,8,76,-27,-35,19,-81,0,-59,-17,-29,43,54,-35,-35,-44,-41,5,25,-13,42,-68,43,6,28,39,-17,-36,31,26,-63,-51,23,0,-45,52,-9,34,-22,50,45,-26,-12,-29,17,17,-52,-12,93,64,-26,11,127, 
  /* [2][0][][] */ 10,64,-127,48,91,28,24,-18,-4,-73,-43,-19,32,-26,49,56,22,-31,-30,85,-34,-41,85,-27,28,-9,42,-33,43,8,27,-69,22,9,1,64,-51,-59,-48,36,6,16,-15,0,-7,-73,18,72,-1,39,15,-15,17,50,-50,8,8,24,35,22,-11,-14,39,-60,-27,9,-19,19,-48,11,24,-35,2,-29,-17,36,122,61,13,-14,-4,-27,-15,-61,-52,47,59,68,16,44,5,-100,-57,36,72,-71, 
  /* [3][0][][] */ -14,25,84,-3,-5,19,3,57,27,-13,23,10,-7,7,15,25,7,-2,2,-50,47,-6,37,19,30,-18,11,61,15,7,13,53,-44,31,12,21,-10,-6,127,-3,-10,21,32,38,-15,0,-2,-13,-14,14,7,91,3,-43,-2,19,-44,26,8,41,16,-7,3,-5,4,2,22,-24,1,-5,0,-76,61,-53,42,-7,-16,-2,-16,32,-4,-28,-3,-13,23,8,36,22,12,33,28,-10,18,63,26,-40, 
  /* [4][0][][] */ 13,2,-62,-46,102,37,-26,-85,-118,-3,-11,-66,2,31,-13,33,41,-76,-15,127,-21,0,26,-19,-21,-16,-19,-38,1,0,40,-18,49,13,-4,3,42,8,-107,-3,-106,11,-27,-46,12,-61,-16,0,21,20,-47,-50,-10,-53,30,-14,8,2,-25,14,-25,74,51,-77,-11,67,-33,1,-90,-6,-2,34,-12,-51,-26,9,44,24,73,-9,5,-48,20,-39,-75,-6,-27,50,6,2,7,-44,-15,33,99,-51, 
  /* [5][0][][] */ -31,37,14,46,33,17,27,29,17,-32,16,33,-27,29,41,-6,20,37,-21,-11,18,20,-21,106,8,-12,44,-28,-10,48,55,56,-13,18,10,-12,24,18,114,-1,2,22,51,-22,23,-20,-13,-7,26,23,62,47,-16,6,-34,-82,-24,42,6,60,74,-37,14,31,10,61,14,28,-3,60,-1,-15,11,-7,13,78,-34,4,-28,-11,24,4,3,-13,16,13,74,127,40,69,25,-101,-16,25,-12,-7, 
  /* [6][0][][] */ 26,-3,-97,-2,-22,-8,27,-35,47,21,-28,-127,-54,-4,-39,36,15,51,-12,-30,-50,34,1,7,-2,-52,-36,-21,-6,-6,6,27,45,20,29,-20,-3,-34,-43,-20,-83,22,13,-14,-18,-48,2,13,-10,26,-31,18,-9,-7,-6,-28,48,-23,1,11,-19,4,-6,-122,39,22,-16,-20,-23,7,119,-10,-55,-3,-5,-10,-29,4,5,8,0,-11,21,-19,-20,12,-46,-9,6,7,29,-17,-68,19,82,-7, 
  /* [7][0][][] */ 87,103,-126,32,104,-7,27,-105,-32,-16,-39,-96,-39,-12,-14,23,27,1,-22,60,-19,-26,69,-11,36,-71,35,-38,22,-18,-19,-28,24,-19,-71,11,14,10,-108,36,-115,102,-12,-19,-48,-43,41,-10,-31,-11,-45,-17,16,-12,-11,-55,119,2,-9,15,-7,-80,-60,-108,-53,98,-15,-46,-88,-16,12,37,-39,-19,2,-4,28,57,17,-25,-71,-67,-62,-31,-52,26,-85,-43,-3,25,-8,-28,-127,79,104,-78, 
  /* [8][0][][] */ -3,-8,28,2,-127,-27,29,30,62,52,77,-31,-34,6,15,16,-15,-15,29,-73,34,-27,-101,12,0,-51,37,17,18,-37,19,43,47,-30,-22,60,-16,-69,13,44,72,-107,47,45,-24,29,38,-5,-104,26,38,22,-58,-32,-61,87,-83,-33,-19,-18,20,-7,-6,4,44,12,-29,-43,44,-6,-49,-31,41,13,41,-66,-14,-65,13,23,-59,-3,-21,-17,25,-17,87,27,-5,-20,45,-27,61,-34,34,54, 
  /* [9][0][][] */ -64,6,19,22,10,21,-28,64,53,-60,63,62,-49,5,39,-53,34,-38,-5,-34,16,-43,13,49,-7,-19,38,85,1,-30,19,24,-9,0,-35,32,-37,-29,127,23,105,-68,7,49,1,-20,-54,-19,4,54,47,57,1,26,-23,-4,-42,34,34,-21,9,-40,22,97,-12,-59,1,-48,0,9,-24,-83,41,-22,18,26,-20,-36,-12,-6,21,19,-23,-4,48,-36,92,11,-11,18,-15,-14,11,-29,-56,-35, 
  /* [10][0][][] */ -3,-18,-32,-39,-10,9,58,-70,26,24,-16,-27,8,-39,28,-15,-18,-45,-31,-31,-39,21,53,-14,-27,-21,54,-127,4,-52,4,-31,-15,-8,-24,-31,11,70,102,26,45,34,11,-63,-12,-82,26,46,-35,66,17,18,-15,1,-35,-40,-21,1,24,-68,-19,-6,5,8,-59,46,21,-7,6,-2,35,-20,-46,-19,42,38,28,31,-27,71,-28,-16,-13,22,-9,5,6,93,20,35,-22,-30,49,-36,101,-100, 
  /* [11][0][][] */ -73,-19,33,29,28,-33,13,30,6,-45,-7,102,-7,0,6,27,107,-3,-7,-39,50,11,-37,50,73,3,102,-10,-11,-9,33,-24,-5,-5,20,14,-14,5,14,22,38,-66,5,22,46,26,74,67,17,5,33,26,23,-26,4,12,-93,17,-89,1,7,61,53,94,35,-31,-8,10,71,24,5,52,4,25,42,-49,-26,69,-66,91,-19,-19,-43,-9,52,41,89,-35,-39,45,-20,-96,-23,15,-127,24, 
  /* [12][0][][] */ -56,8,22,10,7,2,-19,62,1,-21,44,27,-28,15,18,-36,-19,-21,-5,-45,16,-14,-51,35,-19,25,37,122,10,-15,-6,35,-39,-10,-28,18,-27,-22,127,-7,77,-100,12,17,-1,18,-9,-1,-1,16,34,72,-36,-2,-17,35,-46,-23,20,-21,-14,-14,4,71,46,-113,12,-7,7,-118,-20,20,3,4,21,35,-24,-28,-27,-29,16,40,-22,-5,50,-27,49,-28,-24,21,7,-4,53,-62,-98,47, 
  /* [13][0][][] */ -40,120,-85,8,-14,-14,-23,-12,-30,-9,-28,-47,11,5,-33,8,-8,14,-67,4,-28,-21,29,-70,57,-19,32,29,20,-14,-48,-41,-35,7,10,7,-8,5,10,-6,-20,60,-12,-10,-7,-50,-18,8,47,-10,11,40,59,-14,47,-55,12,13,68,-4,-14,-58,-30,-58,1,26,-19,-33,-49,14,13,-127,-18,-44,-33,3,39,-13,-32,-36,46,-20,-39,-54,8,-28,16,-1,2,5,-1,18,-9,29,52,-43, 
  /* [14][0][][] */ 49,25,-63,-31,16,-18,-9,-70,-37,35,0,-75,-33,-26,-59,-26,-39,27,51,25,6,10,4,-44,-24,-13,-52,-54,-15,-16,-36,-11,-29,-1,12,-29,7,0,-59,-2,-36,72,-41,-25,-35,6,25,-7,48,-6,-42,-86,10,8,-38,-8,38,32,-56,8,-12,39,-9,-50,-3,43,-6,-1,-83,10,55,26,-7,-25,-37,-12,35,-51,14,-27,-11,-42,18,25,-25,-94,-127,-28,-1,-18,21,41,-9,32,81,5, 
  /* [15][0][][] */ 32,-40,-93,-21,42,-26,-2,-97,-22,23,-34,-52,37,-9,31,18,-45,19,-26,53,-35,3,-20,-29,21,-6,-11,-50,-14,13,9,-59,1,3,-1,0,18,18,-127,17,-52,15,-12,3,-14,-38,40,28,16,1,-47,-115,13,28,8,-22,55,-5,-23,37,14,28,-2,-62,-7,38,12,26,-36,33,17,45,-32,18,-3,-28,9,19,23,13,-28,8,3,31,-41,-5,-77,-13,8,21,8,36,-61,40,78,-11, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.020790010690689087, 0.014937806874513626, 0.007185203954577446, 0.012010088190436363, 0.012591778300702572, 0.0082582561299204826, 0.015894176438450813, 0.0073069855570793152, 0.008185485377907753, 0.011376394890248775, 0.017921792343258858, 0.018181709572672844, 0.01050897128880024, 0.0077327531762421131, 0.02437569759786129, 0.018546737730503082, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { 24370, 60930, -1425, -7830, 11463, -8712, 1120, -1287, 7821, 9765, -2333, -1567, -2941, 1668, 1863, -20059, -5361, -1749, -999, 4741, -8029, 8577, 3403, 11640, 9906, -690, -4145, 20608, 167, -20136, -966, 23459, 21584, -15899, -1025, -1387, -1198, 2029, 2257, -16222, -2760, 609, -8633, -1570, 17947, -1304, 17727, -5220, -15929, 776, -499, -224, -3596, 30075, -8232, 18520, 14025, -2420, 39593, 1431, -8293, -4090, 623, 968, 2030, 11430, -3742, -16834, -4939, 3208, 548, -2895, 3702, 1889, -3864, -5381, 1813, -4322, 53623, -12208, -4586, -9654, -112, -1561, 41680, -13393, -7628, -27757, -4676, 8340, -1285, 32413, 497, -5661, 1, -50, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 8.4760758909396827e-05, 9.1220012109261006e-05, 0.00015135880676098168, 0.00020591354405041784, 0.00023000713554210961, 0.00010441152699058875, 5.6055585446301848e-05, 0.00013038648467045277, 0.00024898283299989998, 0.00025609805015847087, 0.00023789213446434587, 0.00012732909817714244, 0.00026004266692325473, 0.00021404524159152061, 0.00031071598641574383, 6.4837797253858298e-05, 0.00019228098972234875, 0.00025471780099906027, 0.00016296347894240171, 0.00017585356545168906, 9.3605209258385003e-05, 5.7057637604884803e-05, 0.000132831817609258, 5.846661952091381e-05, 8.7143263954203576e-05, 8.8931148638948798e-05, 0.0002161898446502164, 0.00018776992510538548, 5.3018815378891304e-05, 0.00039969073259271681, 0.00034748599864542484, 0.0001916209002956748, 8.4217259427532554e-05, 9.6460840723011643e-05, 0.00021585274953395128, 0.00046159446355886757, 0.0004357053549028933, 0.0001904032687889412, 0.0003505199565552175, 4.9861933803185821e-05, 0.00021749256120529026, 0.00022560183424502611, 0.00033270416315644979, 5.505696390173398e-05, 0.00030403945129364729, 0.00011102672578999773, 8.6254294728860259e-05, 0.00025961277424357831, 0.00050881522474810481, 0.00017908755398821086, 0.00043794565135613084, 0.00018289602303411812, 0.00019071158021688461, 9.107656660489738e-05, 0.00011284786887699738, 0.00011382804223103449, 0.00020563518046401441, 0.00038572488119825721, 3.5407912946539e-05, 0.00022483400243800133, 0.00032150262268260121, 0.00029418393387459219, 0.00011013814219040796, 0.00023454461188521236, 0.00012225462705828249, 0.00016892138228286058, 0.00025461416225880384, 0.00013514084275811911, 0.00034065553336404264, 0.00012694462202489376, 0.00026465771952643991, 0.00012005481403321028, 0.00031912201666273177, 0.00014086540613789111, 0.00020110243349336088, 0.0003593945293687284, 0.00012657608021982014, 5.6406035582767799e-05, 4.7445122618228197e-05, 0.00010735145042417571, 0.00015191220154520124, 0.00020289931853767484, 0.00017922055849339813, 0.0003401230787858367, 7.5401774665806442e-05, 9.7549520432949066e-05, 0.00013287097681313753, 0.00047048501437529922, 0.00029643630841746926, 0.00011616251867963001, 0.00028726633172482252, 4.3380285205785185e-05, 0.00016898222384043038, 0.00012516345304902643, 0.00089803407900035381, 0.00035249977372586727, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -34,-74,10,127,25,76,84,-45,-9,-17,-16,-22,-22,5,44,-1,-9,-31,32,21,37,-127,117,31,-109,26,58,-35,-120,-127,40,25,8,35,59,-14,-26,-22,33,-14,-29,29,-113,72,41,-74,31,50,-15,57,4,14,5,-5,15,55,-96,-42,-84,-24,-11,7,2,36,55,-26,87,10,21,36,18,127,19,27,21,-3,-17,30,127,-18,-25,15,-35,21,127,9,-101,-10,-4,-20,-18,-26,-8,-20,-16,30, 127,-121,86,102,-35,127,50,-114,67,10,-17,127,127,-83,-7,16,17,127,127,-101,127,-84,74,71,-115,-123,-79,-35,-61,46,-57,-18,-92,47,-127,-65,-40,-18,-50,54,8,127,124,85,-31,-115,-125,-51,-12,-127,52,87,64,-28,44,82,-60,49,-116,-125,-47,-39,-69,57,62,-62,35,36,-50,37,-17,76,106,127,3,21,1,68,-43,62,69,109,127,-25,-5,73,-127,127,-127,-86,-1,-127,-92,-127,-33,116, -71,-18,43,-68,19,-7,62,-34,80,-26,-40,49,-15,2,1,8,-2,-22,9,-8,25,-99,39,15,-127,123,4,-57,112,51,-16,3,-7,3,14,-25,-12,30,22,3,28,21,-127,54,32,-22,28,13,-12,15,-9,11,-6,1,-15,28,-83,10,-67,36,0,45,37,-15,-7,-40,-25,21,-1,7,-8,61,16,-14,8,15,-16,0,-96,5,-22,-27,-6,11,-95,-9,-43,-23,-58,25,-32,-64,23,-30,-12,8, 
  /* [0][1][][] */ -60,-79,54,-18,-44,96,10,127,-61,-17,3,-127,30,-127,82,31,-5,-47,-14,93,6,-47,23,47,-61,-5,127,-20,-19,57,127,-110,-127,107,-81,-52,-29,22,-26,95,-67,-36,-2,54,-38,127,-27,76,15,94,22,-9,15,-53,38,21,127,127,-66,-83,127,-26,-40,127,60,-39,-11,-11,127,35,127,73,-48,100,4,7,12,19,-39,-2,-55,127,-92,110,6,17,-60,31,69,-127,-36,-21,127,-49,-14,0, 65,127,52,-100,127,81,82,27,-127,127,127,-28,-65,-120,-127,127,127,-58,-115,-47,59,87,-127,127,-55,-80,-40,127,-127,106,-124,-127,-86,127,116,127,127,-127,-104,127,-63,-116,117,-127,-127,-29,-127,-127,127,-109,70,44,127,127,127,-127,82,-126,-127,127,14,-69,-127,-95,-127,127,-127,127,-93,-127,-103,-89,-127,-82,127,127,-127,127,-85,127,127,18,-48,-127,58,127,93,45,121,12,127,1,-73,32,127,-127, -47,-19,-54,40,-54,-105,25,-42,9,-30,-40,115,6,110,21,22,-4,55,-12,127,-23,-69,-50,33,-46,123,-69,-16,-62,-14,16,-73,-77,37,10,-17,-27,42,-63,38,127,-4,-41,35,-21,-48,8,47,9,118,-16,7,-28,-75,5,8,87,3,-1,11,-39,127,101,-56,-42,9,37,-8,-71,118,-17,-79,1,-52,20,-11,23,20,86,-37,-78,-48,65,28,-43,-44,73,21,14,62,-51,-1,-48,98,-24,-5, 
  /* [0][2][][] */ -61,-2,-20,-4,16,-46,63,48,49,-26,-30,-14,27,4,-24,17,-7,63,5,13,-119,-74,-17,-13,-44,-111,34,-68,101,36,33,22,14,-1,-7,-34,1,26,3,-3,-35,-15,-65,102,6,39,-8,47,-21,-31,19,-29,24,5,7,2,-47,28,1,24,13,7,-30,1,-6,-53,-48,13,-9,11,26,22,6,-27,27,-5,20,2,-94,-22,-19,-6,8,8,-115,-11,7,-43,-58,-70,-34,-59,29,83,-25,-6, 121,39,-127,-28,-65,-12,29,34,-72,-25,-16,-100,-75,116,-13,33,19,-49,-7,-111,52,-38,-43,15,-82,104,-47,18,-18,-19,-5,-7,-59,6,36,16,-16,-29,127,38,3,-23,77,-52,-39,73,-91,-42,-38,-8,-127,-127,-52,-22,3,31,-59,-8,30,38,-8,-8,4,-37,-59,30,62,-18,100,110,-19,-71,11,-66,-6,-4,92,6,42,26,11,-95,-48,-2,13,10,121,39,-63,30,-27,-124,51,84,-18,39, -42,8,-37,33,10,-68,-127,1,-15,-10,-23,20,21,-21,20,10,-10,-17,0,31,-98,-87,8,16,1,-127,24,0,-32,-37,-7,10,42,-26,1,-14,-35,1,52,-49,28,-4,-52,-48,7,72,-3,19,-14,-9,-12,-15,18,8,-6,-16,-46,-13,-2,-49,-10,20,83,-25,31,-12,-13,26,-8,13,-2,28,-19,11,24,23,39,2,74,-3,6,-16,4,-16,79,-19,65,-39,62,27,-26,-59,-1,5,-21,-14, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0036023322027176619, 0.0038768504746258259, 0.0064327488653361797, 0.0087513253092765808, 0.0097753033041954041, 0.0044374899007380009, 0.0023823622614145279, 0.0055414251983165741, 0.010581769980490208, 0.010884166695177555, 0.010110415518283844, 0.0054114866070449352, 0.011051813140511513, 0.0090969223529100418, 0.01320542860776186, 0.0027556063141673803, 0.0081719420850276947, 0.010825506411492825, 0.0069259479641914368, 0.0074737765826284885, 0.0039782212115824223, 0.0024249495472759008, 0.0056453519500792027, 0.0024848312605172396, 0.0037035886198282242, 0.0037795738317072392, 0.0091880680993199348, 0.0079802218824625015, 0.0022532995790243149, 0.016986856237053871, 0.014768154360353947, 0.0081438878551125526, 0.0035792335402220488, 0.0040995855815708637, 0.0091737415641546249, 0.01961776427924633, 0.018517477437853813, 0.0080921389162540436, 0.014897097833454609, 0.0021191320847719908, 0.0092434333637356758, 0.0095880776643753052, 0.014139926992356777, 0.0023399209603667259, 0.01292167603969574, 0.0047186356969177723, 0.0036658074241131544, 0.011033542454242706, 0.021624647080898285, 0.0076112207025289536, 0.018612690269947052, 0.0077730808407068253, 0.0081052416935563087, 0.003870754037052393, 0.0047960341908037663, 0.0048376917839050293, 0.0087394947186112404, 0.016393307596445084, 0.0015048362547531724, 0.0095554450526833534, 0.013663860969245434, 0.012502816505730152, 0.0046808710321784019, 0.0099681457504630089, 0.0051958216354250908, 0.0071791587397456169, 0.010821101255714893, 0.0057434854097664356, 0.014477860182523727, 0.0053951460868120193, 0.011247953400015831, 0.0051023294217884541, 0.013562685810029507, 0.0059867794625461102, 0.0085468534380197525, 0.015274266712367535, 0.0053794835694134235, 0.0023972564376890659, 0.0020164176821708679, 0.0045624366030097008, 0.006456268485635519, 0.0086232209578156471, 0.0076168738305568695, 0.014455230906605721, 0.0032045752741396427, 0.0041458546184003353, 0.0056470162235200405, 0.019995613023638725, 0.012598542496562004, 0.0049369069747626781, 0.012208818458020687, 0.0018436621176078916, 0.0071817440912127495, 0.0053194467909634113, 0.038166448473930359, 0.014981240034103394, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 3093, 14064, 6905, 20380, 25174, -5132, -3581, 7901, 21853, -10246, 14349, 11463, 10692, 14472, 45039, 2857, 1935, 5303, 33576, 7446, -544, -160, 21578, -2139, 4734, 1029, 10433, 11865, 7122, 52654, 65125, 24462, 11206, -1569, 34272, 3654, 3309, 7555, 18957, -1120, 7199, 13588, 57098, -2191, 60588, 7756, 10010, 26478, 196614, 9803, -849, 8300, -4425, 1204, -2198, 5701, -1741, 60661, 8457, 10077, 19370, 12280, 10029, 16311, 19853, 13888, 7054, -5748, 10616, -4622, 7931, 15153, 57335, 7065, -8968, -9608, 8694, 764, 1981, -2188, 28815, 17589, 7293, 21589, 4089, 1133, 18891, 72896, 16086, 9943, 7382, -834, 11244, 5425, 12480, 10002, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00019358134886715561, 0.00010178179218200967, 0.00020016198686789721, 0.0001134756239480339, 0.00011879628436872736, 0.00017703790217638016, 0.00026894637267105281, 0.000185377401066944, 0.00010371023381594568, 0.00014688023657072335, 0.0001912229199660942, 0.00011250620445935056, 0.00011485139111755416, 0.00015633781731594354, 5.5214237363543361e-05, 0.00022218059166334569, 0.00020043474796693772, 0.00020782936189789325, 7.3754621553234756e-05, 0.00014908096636645496, 0.00023049001174513251, 0.00024311526794917881, 9.737061191117391e-05, 0.00025440705940127373, 0.00052514526760205626, 0.00016583294200245291, 0.00015929307846818119, 0.00011653632100205868, 0.00020536078955046833, 6.7271786974743009e-05, 4.4003656512359157e-05, 9.7534088126849383e-05, 0.00015095710114110261, 0.00015886258915998042, 6.3014071201905608e-05, 0.00015367659216281027, 0.00017389538697898388, 0.00019299767154734582, 0.00013805596972815692, 0.00032915070187300444, 0.00020072626648470759, 0.00012564771168399602, 4.9599781050346792e-05, 0.00028675340581685305, 5.2819497796008363e-05, 0.00016633277118671685, 0.0001685710740275681, 0.00010525627294555306, 2.1880485292058438e-05, 0.00020392547594383359, 0.00017190401558764279, 0.000192504987353459, 0.00023823455558158457, 0.00015087006613612175, 0.00045415724162012339, 0.00016161651001311839, 0.00013018614845350385, 3.6181299947202206e-05, 0.00022998760687187314, 0.00015260679356288165, 9.8166812676936388e-05, 0.00010712313087424263, 0.0001402006164425984, 8.6444022599607706e-05, 0.00013097163173370063, 0.00012620391498785466, 0.00018433183140587062, 0.0001994130143430084, 0.00015360448742285371, 0.00020517098892014474, 0.00014797401672694832, 9.094513370655477e-05, 3.9389462472172454e-05, 0.0001446661917725578, 0.0001862016215454787, 0.00013968102575745434, 0.00020562305871862918, 0.00020805741951335222, 0.00042941156425513327, 0.00015792204067111015, 7.4473435233812779e-05, 9.0574445493984967e-05, 0.00013222750567365438, 9.6178810053970665e-05, 0.00032564159482717514, 0.00016777125711087137, 9.0200468548573554e-05, 5.1896942750317976e-05, 8.6056636064313352e-05, 0.00020592474902514368, 0.00017846371338237077, 0.00024190529074985534, 0.0001552641624584794, 0.00026664949837140739, 8.6593478044960648e-05, 0.0001400372275384143, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ 43,67,-61,22,-18,-29,-5,-6,-34,-25,-50,23,29,-127,-46,-40, 
  /* [1][0][][] */ 54,101,-13,-127,37,-123,106,-123,6,-17,-34,-30,52,-111,-2,11, 
  /* [2][0][][] */ -44,46,4,-26,15,-38,61,38,9,1,81,8,-31,-36,127,95, 
  /* [3][0][][] */ 4,55,-10,127,-83,101,-25,32,-14,68,-22,25,22,3,-12,-37, 
  /* [4][0][][] */ 116,38,-62,95,-116,98,-43,-101,-8,27,-57,-106,74,28,-127,-11, 
  /* [5][0][][] */ -44,-22,95,60,-18,9,24,6,-29,127,32,-97,-5,14,-67,-34, 
  /* [6][0][][] */ -8,12,19,-40,61,75,-22,-38,-10,13,-7,-10,127,-10,-43,-33, 
  /* [7][0][][] */ -12,35,16,22,27,-9,127,7,-43,-15,-20,-114,-76,-34,38,5, 
  /* [8][0][][] */ -9,72,127,-31,52,14,-2,31,58,-6,13,-44,-28,3,-62,-19, 
  /* [9][0][][] */ -62,-88,38,76,18,94,-35,81,115,74,127,-11,21,71,-50,-58, 
  /* [10][0][][] */ -86,-71,42,8,-127,-34,-92,68,29,-7,12,15,-42,20,-39,-42, 
  /* [11][0][][] */ 31,-36,20,-53,41,10,-124,-51,35,56,75,127,16,27,-52,-56, 
  /* [12][0][][] */ 96,-15,-127,-71,-42,-43,26,-118,23,2,-120,-7,83,17,57,-105, 
  /* [13][0][][] */ 43,-127,-91,50,-39,-34,44,2,38,39,18,61,57,16,87,-32, 
  /* [14][0][][] */ 37,-104,127,55,73,75,-39,22,10,60,21,-2,-26,-33,-110,12, 
  /* [15][0][][] */ 88,-27,-27,12,-21,-23,56,19,-19,-127,-21,64,36,-21,-39,-28, 
  /* [16][0][][] */ 11,-12,-39,-29,0,7,48,-7,-25,22,54,18,23,81,127,113, 
  /* [17][0][][] */ -73,11,127,18,25,66,-43,11,36,-29,96,-19,-14,-20,-60,-3, 
  /* [18][0][][] */ -15,57,78,-65,-23,-68,-67,26,-77,-85,-11,-70,10,-127,-3,-31, 
  /* [19][0][][] */ -41,-79,18,-42,2,-25,-44,127,23,-69,101,17,32,124,56,28, 
  /* [20][0][][] */ -14,31,80,-84,13,6,40,81,-12,-21,127,26,30,12,52,56, 
  /* [21][0][][] */ -106,6,36,0,29,69,12,-110,-90,121,53,-70,-127,-73,5,-26, 
  /* [22][0][][] */ 58,-127,-47,102,-11,-13,-43,72,-107,98,-65,-48,27,77,63,-92, 
  /* [23][0][][] */ -13,-15,31,-41,5,-12,47,13,-22,15,125,34,127,23,98,22, 
  /* [24][0][][] */ -7,26,6,-52,-14,-17,-31,-29,-19,-25,-20,-35,7,-127,-24,-16, 
  /* [25][0][][] */ -20,-46,-72,-38,63,9,18,-127,-61,45,-39,45,40,-50,18,34, 
  /* [26][0][][] */ -29,-75,54,-16,76,68,7,-9,8,49,127,40,-15,26,-69,-21, 
  /* [27][0][][] */ 65,-127,6,-12,-79,-101,-14,15,-17,13,-82,15,-17,40,3,73, 
  /* [28][0][][] */ -101,-56,-105,-127,22,2,-18,-55,8,-11,17,82,15,-11,-50,70, 
  /* [29][0][][] */ -13,-43,21,127,-36,48,-65,-51,-54,35,-105,7,48,-86,-9,-51, 
  /* [30][0][][] */ -35,90,62,-14,34,77,43,37,-22,-30,-34,-127,8,5,-25,-71, 
  /* [31][0][][] */ 74,-86,-73,-35,6,-8,29,-123,-52,58,46,25,19,11,127,104, 
  /* [32][0][][] */ 8,34,-23,37,-127,4,-45,-12,-40,-39,-21,54,5,96,57,115, 
  /* [33][0][][] */ 19,28,88,127,93,-4,6,-87,-82,93,55,-27,7,-25,-6,65, 
  /* [34][0][][] */ 60,-6,11,26,127,-2,-89,-63,-116,112,-59,18,19,-67,56,30, 
  /* [35][0][][] */ 67,-52,1,58,-32,-127,-36,38,77,-5,-13,29,-29,35,-116,8, 
  /* [36][0][][] */ 33,-36,-127,36,21,98,-5,-5,-54,18,2,14,27,21,22,37, 
  /* [37][0][][] */ -43,-76,79,-11,-23,27,27,-104,28,127,83,81,16,27,54,60, 
  /* [38][0][][] */ -22,9,-54,37,-39,68,6,-26,3,-6,52,15,27,32,-2,-127, 
  /* [39][0][][] */ -58,25,-34,88,-5,17,-127,67,-10,64,-13,-47,49,-7,-45,-39, 
  /* [40][0][][] */ -25,61,-7,70,-34,-34,31,5,-21,-25,-43,-127,-22,33,-5,23, 
  /* [41][0][][] */ 41,6,-21,80,0,13,28,127,2,-5,-69,-84,4,95,-6,-33, 
  /* [42][0][][] */ -60,-11,7,-30,-7,-40,-46,20,-7,-61,127,21,-23,-5,-31,13, 
  /* [43][0][][] */ -45,-42,-19,-7,14,25,-1,-127,-27,71,-9,29,-106,-35,97,63, 
  /* [44][0][][] */ 96,-30,-113,-33,87,24,38,-125,40,15,-6,89,127,82,38,114, 
  /* [45][0][][] */ -50,-127,-54,59,38,65,121,43,-37,37,-16,-15,80,82,75,69, 
  /* [46][0][][] */ -39,93,-36,119,-45,31,47,-2,-78,41,-62,-70,27,12,-46,-127, 
  /* [47][0][][] */ 5,-51,-34,46,41,-17,-54,-15,127,20,87,86,-11,13,-1,52, 
  /* [48][0][][] */ 33,68,30,-87,77,52,85,-114,-52,110,-14,6,55,9,127,29, 
  /* [49][0][][] */ -10,20,30,37,28,17,10,101,-10,-37,-73,-127,33,9,-116,-98, 
  /* [50][0][][] */ 23,105,2,-9,45,42,30,127,17,-48,-10,-51,0,-16,71,22, 
  /* [51][0][][] */ 11,-38,1,12,-1,-19,-127,-91,-15,-40,-45,34,25,-9,-70,-13, 
  /* [52][0][][] */ 31,67,32,20,14,36,-85,40,-51,127,-44,-83,97,73,-112,-28, 
  /* [53][0][][] */ -32,15,-127,-101,10,28,32,-44,-2,-11,-16,93,88,-66,17,39, 
  /* [54][0][][] */ 43,18,-19,7,41,-19,36,-21,14,29,-66,-72,49,127,-70,-38, 
  /* [55][0][][] */ -18,127,84,-70,71,-1,-94,-41,-43,-11,32,4,-27,-62,70,-41, 
  /* [56][0][][] */ 43,-72,-11,-29,45,-7,-5,53,38,-19,98,72,40,37,54,127, 
  /* [57][0][][] */ -19,-8,52,121,21,21,-7,127,-32,-33,-76,-52,3,40,-56,1, 
  /* [58][0][][] */ 45,89,62,-127,23,-11,-20,-44,11,-20,-72,21,-49,-124,20,52, 
  /* [59][0][][] */ 21,118,-16,-30,-127,21,82,27,-35,21,45,-88,54,-48,23,5, 
  /* [60][0][][] */ 40,7,55,-21,-49,108,39,-127,-58,67,-20,-41,88,-37,35,2, 
  /* [61][0][][] */ 39,11,-36,26,-18,-23,86,127,-26,19,-70,-32,29,28,118,28, 
  /* [62][0][][] */ -2,-18,27,-1,-94,-36,-51,19,-110,-95,-39,-62,-17,-127,62,36, 
  /* [63][0][][] */ 40,12,-4,-47,-23,-7,-127,-33,0,42,54,110,41,-13,-21,-19, 
  /* [64][0][][] */ 2,-64,-5,107,-93,4,-103,-123,100,-127,-31,-4,-96,1,-107,21, 
  /* [65][0][][] */ -32,48,25,16,25,90,-10,-73,8,127,75,24,64,-6,-37,-104, 
  /* [66][0][][] */ 71,15,127,-44,19,-6,-80,38,112,-18,55,-86,28,80,-63,-63, 
  /* [67][0][][] */ 34,-42,16,0,41,-94,-127,-82,123,-98,-79,-6,-58,40,-73,-24, 
  /* [68][0][][] */ -28,25,-7,50,-36,-57,31,40,-39,-43,-16,-59,-4,52,127,31, 
  /* [69][0][][] */ 55,43,-63,-24,-30,-58,-10,21,8,15,-47,0,127,-65,-30,14, 
  /* [70][0][][] */ -93,11,-18,-100,-31,7,127,92,-66,33,66,84,-50,14,-27,-28, 
  /* [71][0][][] */ 78,-43,-75,-127,-72,-64,73,22,-41,-51,-119,1,-82,-79,2,82, 
  /* [72][0][][] */ -45,-1,21,-22,44,10,-115,-70,89,-17,74,65,127,116,66,35, 
  /* [73][0][][] */ -43,-20,-8,17,-127,67,14,-1,-58,38,-63,-65,-112,-9,-34,2, 
  /* [74][0][][] */ -37,52,114,53,0,-15,-127,9,-4,-26,-61,-101,-30,-49,-83,-59, 
  /* [75][0][][] */ -113,109,24,2,62,76,94,31,-80,70,-4,-125,-127,-2,-54,-61, 
  /* [76][0][][] */ -30,-43,76,-34,23,-66,-35,-11,42,-66,26,-11,-2,127,-7,66, 
  /* [77][0][][] */ -37,-99,-11,-3,-77,-16,-9,-9,127,19,-29,0,-38,100,79,5, 
  /* [78][0][][] */ -116,-21,10,27,30,52,-37,36,-47,-49,-63,11,3,-53,127,62, 
  /* [79][0][][] */ 113,-10,-34,-47,90,-77,-14,6,76,-46,-20,34,6,-9,94,127, 
  /* [80][0][][] */ -42,-110,109,-39,49,58,1,-64,-125,60,42,7,-47,127,-93,-54, 
  /* [81][0][][] */ -12,12,59,53,-38,1,-4,24,9,-63,-52,-127,-76,42,-74,46, 
  /* [82][0][][] */ 48,39,0,-127,32,19,-29,-35,-82,-5,-11,-15,-13,-95,-18,36, 
  /* [83][0][][] */ 46,-78,-9,-48,-100,-82,45,63,8,8,29,-112,75,-74,29,127, 
  /* [84][0][][] */ 78,61,-5,1,-79,-6,-55,13,29,-55,127,28,-58,-5,74,-58, 
  /* [85][0][][] */ -4,-30,-19,54,14,-18,-33,127,-48,-100,-94,-39,1,127,98,-77, 
  /* [86][0][][] */ -49,73,24,-3,-31,-44,81,90,-28,-127,38,-127,-125,-63,101,28, 
  /* [87][0][][] */ 67,-89,30,22,-86,-31,55,63,13,32,-127,57,30,92,11,59, 
  /* [88][0][][] */ 14,60,-70,-15,-72,-120,26,35,-31,-80,1,60,-110,-75,127,40, 
  /* [89][0][][] */ 23,102,-19,-15,-25,-36,-22,-65,-4,0,-8,-52,14,-29,-36,-127, 
  /* [90][0][][] */ 67,-80,-42,-39,-44,-59,127,-70,78,-40,90,-80,0,-23,21,27, 
  /* [91][0][][] */ -29,-2,-62,-46,28,24,65,-19,-25,55,115,115,-16,18,127,126, 
  /* [92][0][][] */ 9,-34,-19,35,41,17,45,-127,-15,39,-15,-11,7,41,-11,-47, 
  /* [93][0][][] */ 22,-10,106,-74,-62,14,7,-20,10,57,127,16,-54,7,-35,37, 
  /* [94][0][][] */ -41,42,27,17,-43,-94,48,109,32,-127,30,-89,-29,48,110,31, 
  /* [95][0][][] */ -7,127,71,-61,-1,21,-16,-21,36,-39,4,-26,6,-12,-68,-88, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00065823958721011877, 0.00034609122667461634, 0.00068061589263379574, 0.00038585404399782419, 0.0004039460327476263, 0.00060198648134246469, 0.0009145051590166986, 0.0006303435075096786, 0.00035264855250716209, 0.00049944058991968632, 0.00065022014314308763, 0.00038255771505646408, 0.0003905321063939482, 0.00053159944945946336, 0.00018774638010654598, 0.00075548631139099598, 0.00068154337350279093, 0.00070668745320290327, 0.00025078971520997584, 0.0005069238250143826, 0.00078374106669798493, 0.00082667102105915546, 0.00033109178184531629, 0.00086506677325814962, 0.0017856648191809654, 0.00056388595839962363, 0.00054164830362424254, 0.00039626142824999988, 0.00069829350104555488, 0.00022874597925692797, 0.00014962675049901009, 0.00033164763590320945, 0.0005133032682351768, 0.00054018449736759067, 0.00021426835155580193, 0.0005225504282861948, 0.00059130089357495308, 0.00065625488059595227, 0.00046943521010689437, 0.0011192194651812315, 0.00068253464996814728, 0.00042724309605546296, 0.00016865540237631649, 0.00097505492158234119, 0.00017960347759071738, 0.00056558556389063597, 0.0005731965065933764, 0.0003579055774025619, 7.4400770245119929e-05, 0.00069341296330094337, 0.00058452959638088942, 0.00065457960590720177, 0.00081007502740249038, 0.00051300734048709273, 0.001544282422401011, 0.00054954871302470565, 0.00044267525663599372, 0.00012302819231990725, 0.00078203273005783558, 0.00051891274051740766, 0.00033379910746589303, 0.00036425350117497146, 0.00047672772780060768, 0.00029393780278041959, 0.00044534617336466908, 0.00042913437937386334, 0.00062678824178874493, 0.0006780691328458488, 0.00052230525761842728, 0.00069764815270900726, 0.00050315982662141323, 0.00030924304155632854, 0.00013393699191510677, 0.00049191212747246027, 0.00063314608996734023, 0.00047496095066890121, 0.00069918530061841011, 0.0007074629538692534, 0.0014601390575990081, 0.00053698633564636111, 0.00025323391309939325, 0.00030798258376307786, 0.00044961654930375516, 0.00032703924807719886, 0.001107287360355258, 0.00057047687005251646, 0.00030671095009893179, 0.00017646649212110788, 0.00029262056341394782, 0.00070021115243434906, 0.00060683471383526921, 0.00082255672896280885, 0.00052794866496697068, 0.0009066950879059732, 0.00029444601386785507, 0.00047617213567718863, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { 4351, 21253, -12330, 13901, -13679, -20274, -10548, 3716, 51662, -16880, 10085, -1344, -8677, 5702, 40521, -3893, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00027509545907378197, 0.00025773004745133221, 0.00025821605231612921, 0.00018521357560530305, 0.00024709408171474934, 0.00027042353758588433, 0.00014332991850096732, 0.00025953180738724768, 8.1625563325360417e-05, 0.00014808763808105141, 0.00026092358166351914, 0.00031582076917402446, 0.00013113314344082028, 0.00024417537497356534, 0.0003650634316727519, 0.00035353496787138283, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 36,31,-33,3,51,47,-32,-21,57,15,-10,14,-8,22,5,127,-17,14,-51,-17,102,-21,17,4,-37,-13,1,-72,12,35,27,32,100,-16,10,-2,-27,0,-28,2,7,-26,-28,-24,-7,-10,-17,13,-9,16,-7,9,-21,-2,-14,8,23,16,-12,34,-17,28,8,11,-25,29,21,14,2,25,-3,-11,-84,7,-25,9,-25,-61,20,3,26,-3,-38,-42,48,-49,-7,17,28,19,11,13,6,14,36,94, 
  /* [1][0][][] */ 11,-111,72,-4,-47,-30,3,-89,8,-108,-29,8,32,-55,-13,-29,-37,58,-4,8,-2,-9,-11,-41,89,-44,-13,-16,27,77,-34,28,-23,61,3,11,-61,45,59,-115,14,-127,23,-54,-31,41,44,-40,-22,-4,22,-34,46,-24,-28,13,16,27,15,-16,41,-41,34,-44,-12,-103,28,34,-7,95,-32,20,-102,-5,-23,12,28,104,47,5,95,3,-62,-11,-4,63,-50,14,-81,15,-48,37,51,-10,-47,36, 
  /* [2][0][][] */ 16,45,16,-20,-12,3,-2,13,75,-4,10,44,-43,2,27,-70,-30,-27,36,14,-47,-58,6,-38,10,-3,15,63,-3,-10,75,-60,40,-90,-42,7,-9,127,12,-16,-19,-55,2,-4,-58,-19,-24,0,14,-4,29,-17,69,10,-29,37,41,17,-29,-17,-41,-9,9,9,4,-32,29,-32,18,-9,-15,-27,45,39,-61,11,0,63,-1,-38,-12,50,17,5,-13,2,9,35,-8,-31,-34,-96,-42,-46,-11,1, 
  /* [3][0][][] */ -38,-49,-42,38,14,-35,21,117,-53,42,-53,-26,42,-7,50,-73,35,-3,-14,18,-7,0,44,-24,48,42,19,-88,-3,-1,35,-25,-19,112,9,-2,-18,-59,21,89,12,-7,9,50,28,-40,49,16,-37,1,-21,9,-127,-10,-24,-57,-15,-30,-41,48,44,-20,24,33,9,-34,-55,3,18,46,-53,24,-89,-15,46,38,-12,-52,13,-8,-2,-9,9,32,-16,59,63,19,-18,20,27,32,41,30,-24,20, 
  /* [4][0][][] */ 19,-32,19,-36,3,48,-7,73,-55,-57,-44,-23,55,49,0,-34,31,21,15,44,-86,66,37,56,14,29,94,25,32,-10,-7,-33,3,-1,72,-14,27,-28,12,-40,-27,33,-60,-2,43,-5,-61,23,-1,34,-43,13,-13,-32,39,72,35,-14,64,3,0,-55,107,39,38,-27,24,-22,-17,38,0,-16,34,25,-58,18,4,97,80,-5,4,-16,127,-6,103,-36,-34,-28,48,-7,-50,-1,-5,21,-20,5, 
  /* [5][0][][] */ 9,17,7,-2,10,-73,-3,127,-14,-21,-42,-36,14,32,55,-42,20,-32,-27,-29,-53,1,47,-26,48,35,10,45,15,-15,28,42,4,109,77,-12,-22,-17,-36,-5,-13,22,44,-5,70,-59,46,44,-11,4,-15,0,-3,-13,30,16,-46,5,30,-8,-22,12,48,42,63,30,-44,30,-3,30,38,-1,24,-9,9,9,23,39,60,103,-4,-18,-33,3,29,-2,45,13,-61,-11,30,-51,11,-15,-20,-63, 
  /* [6][0][][] */ -68,-42,35,-63,-20,-22,-31,-40,15,56,-13,-2,15,-24,22,65,72,-39,70,-18,50,-41,-19,-9,86,4,-29,17,41,45,-59,18,-102,-37,-108,-16,60,-59,79,1,11,-23,-77,12,-38,-29,53,-114,-28,22,-13,-20,-38,-24,-32,-115,34,-54,-15,9,5,27,-9,-21,93,9,7,31,4,-15,-46,-10,72,44,113,-7,-4,41,53,53,53,5,62,-25,-96,127,71,10,-8,-23,32,-14,-58,26,-24,24, 
  /* [7][0][][] */ -28,-29,47,-11,-19,17,10,-38,14,45,19,-5,-71,-40,8,1,1,-18,25,-9,3,-52,-53,-24,-42,2,-24,6,-12,20,-6,-28,-50,-49,-34,-9,7,-42,42,16,-3,10,-15,14,-13,-3,-28,30,1,19,-5,-5,-13,-11,-17,-78,23,-41,-31,-20,-32,6,-35,-10,-18,-5,10,-13,23,-58,-44,5,27,-7,21,-8,26,13,-9,-30,-60,-18,25,-24,-42,127,29,-19,-3,-48,15,-24,-38,-32,-8,7, 
  /* [8][0][][] */ -104,-30,-70,-12,57,4,-30,-13,52,106,-50,46,-21,2,40,-36,-40,12,-83,60,19,-29,-90,-10,-94,-6,-13,97,18,-91,38,-19,-75,54,67,-16,14,59,-119,10,-1,76,9,-127,-32,-64,-5,-77,-90,25,20,88,43,9,58,-52,-5,8,0,-22,-7,33,28,15,-57,-36,4,-58,-41,39,28,24,13,3,-38,51,-9,-85,65,-57,45,5,16,20,-18,5,-15,19,98,31,8,-78,40,0,-11,-57, 
  /* [9][0][][] */ 71,-30,-28,-16,16,-40,-36,66,2,-61,-28,24,-18,12,-17,-10,-26,-22,3,-7,-30,4,44,16,44,12,8,0,-43,-36,26,-1,61,50,7,22,-1,29,-90,-8,-1,-9,16,-45,-37,-44,48,-2,-15,-11,29,9,-15,-1,37,-51,-57,2,-28,10,52,32,38,30,55,127,-4,10,-11,38,60,-23,12,23,-63,20,14,-42,-1,5,-13,5,-39,-40,15,-30,-11,69,-40,23,4,-4,-1,-17,46,-37, 
  /* [10][0][][] */ 23,42,18,-4,52,-80,28,-36,13,-16,-10,5,-37,-10,19,-93,13,-14,3,28,-63,-1,-54,-81,-52,1,-18,127,-25,-13,-17,31,14,-12,35,-23,63,41,26,-104,-67,35,82,-49,-45,23,-31,6,-65,-21,-31,-15,61,1,68,6,15,27,6,9,-40,30,4,25,6,19,46,22,30,-9,27,19,-11,-2,-58,-31,-2,67,22,2,80,13,-70,-41,87,33,46,41,-38,-11,6,-59,70,39,-16,-57, 
  /* [11][0][][] */ 72,62,-16,25,6,49,44,20,2,-22,9,11,31,45,24,-37,21,-33,-127,-16,-5,-4,-51,-10,-72,-3,-1,41,-20,-20,36,9,51,-117,84,20,37,41,-64,-52,-14,42,75,-124,34,-50,-48,45,-100,23,-11,-43,50,12,69,33,-23,-5,22,12,-13,33,41,-19,-31,69,-6,-8,19,14,72,-6,-8,-9,-52,43,-5,-35,-39,-19,36,3,28,76,84,-39,25,-35,50,13,14,-35,-5,15,35,6, 
  /* [12][0][][] */ 16,-19,13,19,6,0,33,108,127,-60,-49,9,62,50,-86,-45,11,-2,-16,62,38,92,-17,32,-28,30,36,-18,-108,-12,-14,-22,83,105,53,-44,17,52,-50,-42,-58,-14,58,26,0,-6,22,82,-32,-28,-39,41,47,1,97,-32,57,17,-12,36,40,27,88,81,40,102,-94,-31,27,87,119,-62,-14,-14,-117,3,18,-46,24,-95,8,-2,-20,8,105,-46,-69,-43,24,59,-37,87,17,-18,37,-42, 
  /* [13][0][][] */ 39,-16,-40,80,65,-1,24,73,0,45,41,-21,-70,-53,-39,-112,28,-127,-10,28,-34,-46,11,-34,-31,24,-8,27,-45,-58,-9,3,25,3,-4,46,26,-25,-26,55,-55,19,37,79,49,-13,-10,-117,36,30,-25,64,-54,-37,6,-52,-24,-2,-27,4,-60,13,-13,-20,8,35,-39,-69,59,-75,13,-115,51,46,-31,12,-29,-31,-10,-21,-22,-10,-8,31,-10,17,66,24,55,-33,37,-61,-53,8,-2,-53, 
  /* [14][0][][] */ -108,-49,67,27,28,-6,4,-24,-10,31,3,29,36,-6,-97,24,38,-41,40,37,-29,-20,-55,-7,-87,-18,6,8,-28,-5,-106,25,-34,-55,-76,-30,30,-29,63,-16,-22,27,-46,5,-29,82,-19,27,-127,13,-74,24,-12,-35,29,-34,-12,-36,7,45,-34,12,-49,13,27,-54,-15,-17,-11,7,-34,-58,-19,14,14,5,10,42,46,-18,39,-3,52,21,16,79,34,1,38,17,24,-50,-28,21,43,-12, 
  /* [15][0][][] */ 30,27,38,10,-45,82,33,-43,9,31,57,15,-50,-7,-2,10,21,3,26,-5,16,-27,-70,41,-51,-8,19,42,-1,20,-25,-30,-20,-127,-51,-14,60,-25,11,-53,-10,65,-11,30,-19,33,-48,-49,48,-9,-20,-11,36,-25,13,-39,40,-51,-3,1,-111,-30,-36,-30,11,22,-5,7,22,6,-47,1,50,36,11,-18,4,-4,11,-13,-62,-8,36,51,-31,17,30,-65,23,-29,24,-24,-80,16,10,-20, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.011691556312143803, 0.010953526943922043, 0.010974181815981865, 0.0078715765848755836, 0.010501498356461525, 0.011493000201880932, 0.0060915211215615273, 0.011030102148652077, 0.0034690864849835634, 0.0062937247566878796, 0.011089252308011055, 0.013422382064163685, 0.0055731586180627346, 0.01037745364010334, 0.015515195205807686, 0.015025235712528229, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 10910, -10904, 6933, 107006, 840, -3374, -11749, 291, -4108, -3922, 5409, -3289, 346, -8772, 5488, -3986, -3296, 20063, 13962, 4276, 1359, -2735, -955, -1251, 16510, -1099, 2383, -6757, -8493, -11097, 7141, -8696, 3672, -3034, -4938, 56479, 2615, 8523, 28455, 867, -350, 336, -5493, -8536, -6555, 68660, 3981, 32530, 18876, -18780, -1439, 7805, 7191, -975, -887, 3261, -27300, -64, -916, -6397, -188, -2643, -8811, 1791, 2580, 15591, 26589, 68034, -8639, -699, -3252, -1113, 31589, 11723, -1274, 650, 15988, 34271, -2188, -11753, 615, -9932, -1414, -5424, 526, -2938, 665, -1874, -1524, -1376, -5, -1762, -2676, 2745, 2850, 52496, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00025257206289097667, 0.00011585254105739295, 0.00015820578846614808, 2.1227799152256921e-05, 0.00014766302774660289, 0.00021649555128533393, 0.00025190968881361187, 0.00011503250425448641, 0.00013061112258583307, 0.00040772734791971743, 0.0001355274289380759, 0.00026756603620015085, 0.00010239633411401883, 0.00031320666312240064, 0.00019317214901093394, 0.00016508973203599453, 8.4531195170711726e-05, 0.00028204280533827841, 0.00010516537440707907, 0.00017580349231138825, 4.8847599828150123e-05, 0.00016236522060353309, 0.00015373983478639275, 0.00034322464489378035, 0.0002747428952716291, 0.00020678536384366453, 0.00010732575901784003, 0.00022367850760929286, 5.9519894421100616e-05, 6.2179366068448871e-05, 9.8643147794064134e-05, 0.00018460932187736034, 0.00013198595843277872, 0.00010765100887510926, 0.00023653765674680471, 4.3292009650031105e-05, 0.00035173309152014554, 0.00010536229092394933, 4.8658654122846201e-05, 0.00019537197658792138, 0.0002137802803190425, 0.00045370726729743183, 0.00036241504130885005, 0.00011698957678163424, 0.00022374314721673727, 6.6115731897298247e-05, 0.00021277683845255524, 0.00010303199087502435, 0.00014075993385631591, 0.00010219762043561786, 0.00019818170403596014, 0.00012251941370777786, 0.00021332413598429412, 0.00015828957839403301, 0.00035697637940756977, 0.00043364387238398194, 0.00013690527703147382, 0.00021173965069465339, 7.6214353612158448e-05, 5.3901116189081222e-05, 0.00034586028777994215, 0.00011610637739067897, 0.00031058466993272305, 8.7990854808595031e-05, 0.00012513474212028086, 0.00021968482178635895, 5.2954383136238903e-05, 2.7709578716894612e-05, 0.00024324057449121028, 0.00023521283583249897, 0.00025927054230123758, 6.3635467085987329e-05, 0.00017875325283966959, 0.00014829293650109321, 0.00022749436902813613, 0.00018467355403117836, 0.00045791303273290396, 6.2658538809046149e-05, 0.00024596095317974687, 0.00016107068222481757, 0.00019655488722492009, 0.00022369436919689178, 0.00017469197337049991, 9.8808130132965744e-05, 0.00016654233331792057, 0.000219693873077631, 0.00011331011774018407, 0.00017604802269488573, 0.00033185514621436596, 0.00010404670319985598, 0.00012584954674821347, 0.00011886820720974356, 0.00014010928862262517, 0.00042347493581473827, 0.00027463104925118387, 7.4143870733678341e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -15,37,-24,99,-23,30,-65,-51,9,1,99,-12,-5,-9,-9,89,-2,23,-37,5,108,5,36,-30,-7,14,38,69,38,9,25,50,-15,26,13,-13,13,41,-87,-33,16,15,12,33,-83,-61,23,-7,-19,-15,-9,-11,50,0,-22,-3,6,-33,12,-30,30,-8,127,22,-18,-17,6,-37,62,34,-12,-3,89,-24,75,7,23,-117,43,53,3,21,127,-14,21,32,-41,-22,54,-13,-11,85,18,13,0,14, -43,31,-17,8,52,-8,-13,-127,35,23,-127,-7,-17,-9,-1,127,17,-25,-8,-17,79,-97,127,32,-62,-37,-105,-2,26,46,-49,18,112,12,-7,3,-17,127,-93,-127,4,-14,-47,26,40,-127,127,-45,-89,66,43,3,47,-68,54,49,52,55,-79,96,127,27,-14,-41,37,-36,-127,-2,26,-29,-16,45,-56,-46,103,-7,-28,-49,-33,48,-64,62,10,5,-19,44,57,-38,-19,51,-10,74,-118,-41,22,-127, -3,12,-30,-73,3,16,34,4,-15,16,-7,61,3,-15,-18,34,-20,23,-37,23,25,19,29,-35,-10,-25,2,45,4,8,48,-87,42,25,28,-18,19,-4,-41,-38,4,19,-31,38,27,-56,24,1,-5,3,6,-10,18,4,-6,4,11,54,24,-2,6,-16,-5,-20,-35,-22,7,-59,-121,-7,44,0,-125,-27,26,13,8,-26,14,8,-27,34,-16,-3,-58,18,38,30,-11,-21,36,-7,22,-3,0,-57, 
  /* [0][1][][] */ -36,70,-24,37,-89,-12,-8,-27,23,96,-49,-19,-36,-28,-5,68,127,-32,-58,-14,87,-127,-26,17,-40,-53,-127,-6,53,47,-48,24,-127,-78,-46,3,57,-19,-77,41,-28,84,-5,-9,35,-23,-25,-34,127,33,-4,21,39,5,-53,-17,57,11,-125,127,-47,-84,24,127,-64,-38,-121,127,-45,127,-42,50,-44,-48,37,9,-27,-61,127,42,127,37,10,-1,127,24,-109,46,-14,-42,-101,46,101,102,29,-69, 127,127,127,127,-49,-127,127,30,127,-127,9,-127,-109,127,127,100,-14,-127,-34,-127,127,20,-62,127,127,127,-62,-127,127,127,-127,127,-10,-127,-113,127,-127,-65,104,110,-127,-127,127,127,127,-103,-121,127,-20,127,-127,-127,-127,127,127,-127,127,-127,-35,28,-109,-21,-81,-77,127,127,-67,117,127,-95,-127,127,-43,127,-127,-127,-127,127,-81,127,-39,127,71,127,-37,-127,-17,-99,-127,-127,-21,-127,-12,-127,-127,118, -29,59,-43,-6,127,54,-19,38,1,37,-34,-5,-23,-36,-10,-5,-108,-29,-127,28,60,72,-10,-118,-40,-44,106,86,19,36,74,5,112,-38,127,-4,57,3,-127,16,41,36,-19,13,-28,-56,-19,-45,82,16,-11,32,1,-2,-79,-15,37,23,127,-108,-8,127,-12,-33,-114,-27,-91,108,18,-6,113,40,-18,-46,31,41,-33,-8,-33,5,-41,8,27,23,-86,26,127,-45,36,-27,127,-3,-127,35,35,13, 
  /* [0][2][][] */ -13,-71,-30,-62,-12,17,38,31,-3,12,-28,55,38,-37,-10,-30,46,-7,-5,15,-1,29,-25,-27,-5,-30,5,-2,-4,-10,55,-83,-49,79,-26,-27,22,-54,-91,22,4,7,-37,11,16,-95,-13,-5,-16,-5,19,-14,-7,-2,-40,10,19,48,-44,30,-6,-22,17,14,-4,-15,50,-51,-68,10,-35,-12,-127,-37,1,14,25,-14,55,29,33,25,-17,23,23,22,-32,11,11,19,14,1,28,39,-7,-32, -35,-58,-31,25,-54,65,-29,61,4,-2,46,-12,127,-4,-30,-43,3,-48,-42,6,-32,78,-45,-108,-45,-53,90,65,10,51,65,-2,-118,72,-5,-21,-37,-38,-114,1,45,-17,-24,29,-22,-56,-13,-52,-67,28,69,17,-15,-86,28,50,28,26,78,-66,28,-66,-15,-6,22,-26,-120,-55,-20,-23,-51,32,43,-49,-33,-18,-40,16,-61,11,51,27,20,28,13,38,-91,127,7,126,-42,-18,113,-23,33,86, -18,-72,-31,26,18,56,-46,13,-4,4,-16,11,18,-56,-15,-7,-50,-16,-19,10,-23,8,-26,8,-5,20,-11,43,6,-12,44,27,2,62,40,-27,-10,-30,-70,12,13,-2,22,8,-88,-54,-11,-1,2,-14,8,-10,-12,11,-30,-3,20,-52,21,-38,-23,42,-7,-28,-8,-6,38,-56,47,8,57,-12,42,-58,-14,16,9,2,-2,40,-26,41,84,2,-15,42,58,-3,111,7,3,-13,-6,-28,-5,-56, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.010734312236309052, 0.0049237329512834549, 0.0067237457260489464, 0.00090218143304809928, 0.0062756785191595554, 0.0092010609805583954, 0.010706162080168724, 0.0048888814635574818, 0.0055509726516902447, 0.017328411340713501, 0.0057599153369665146, 0.011371555738151073, 0.0043518440797924995, 0.013311282731592655, 0.0082098161801695824, 0.007016313262283802, 0.0035925756674259901, 0.011986819095909595, 0.0044695283286273479, 0.0074716485105454922, 0.0020760230254381895, 0.0069005214609205723, 0.0065339431166648865, 0.014587046578526497, 0.011676573194563389, 0.0087883779779076576, 0.0045613446272909641, 0.0095063364133238792, 0.0025295955128967762, 0.0026426231488585472, 0.0041923336684703827, 0.0078458962962031364, 0.0056094028986990452, 0.0045751677826046944, 0.010052850469946861, 0.0018399104010313749, 0.014948655851185322, 0.0044778971932828426, 0.0020679926965385675, 0.0083033088594675064, 0.0090856617316603661, 0.019282558932900429, 0.015402638353407383, 0.0049720569513738155, 0.0095090838149189949, 0.0028099184855818748, 0.0090430155396461487, 0.004378859419375658, 0.0059822970069944859, 0.0043433988466858864, 0.0084227221086621284, 0.0052070748060941696, 0.0090662753209471703, 0.006727307103574276, 0.015171496197581291, 0.018429864197969437, 0.005818474106490612, 0.0089989351108670235, 0.0032391098793596029, 0.0022907974198460579, 0.014699062332510948, 0.0049345209263265133, 0.013199848122894764, 0.0037396112456917763, 0.0053182262927293777, 0.0093366047367453575, 0.0022505612578243017, 0.0011776570463553071, 0.010337724350392818, 0.0099965455010533333, 0.011018997989594936, 0.0027045074384659529, 0.0075970133766531944, 0.0063024498522281647, 0.0096685104072093964, 0.0078486260026693344, 0.019461303949356079, 0.0026629879139363766, 0.010453340597450733, 0.0068455035798251629, 0.0083535825833678246, 0.0095070106908679008, 0.0074244085699319839, 0.0041993455961346626, 0.0070780487731099129, 0.0093369893729686737, 0.0048156799748539925, 0.007482040673494339, 0.0141038428992033, 0.0044219847768545151, 0.0053486055694520473, 0.0050518987700343132, 0.0059546446427702904, 0.017997683957219124, 0.011671819724142551, 0.0031511145643889904, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 15857, 2842, 14220, -671, 7712, 4796, 23297, 10359, -4198, 17714, 2763, 2840, 8063, 21329, -549, -5538, 14385, 24410, 4795, -94, -1467, 13675, 3365, 4130, 15718, 8407, 10673, 4087, 619, 128, 11821, 16677, 15749, 5345, 21452, -282, 23189, 7083, 2786, 6580, 4600, 15988, 18988, 3543, 10216, 19423, 22255, 8122, 9836, 7301, 574, -2256, 9745, 9504, 18532, 13280, 20, 13768, 4461, 5659, 16731, 14143, 9868, 22831, 10454, 5924, 6592, -891, 37104, 8966, 9499, -3072, -3724, 6129, 3516, 4061, 35450, 26579, 13232, -3771, 2739, -5999, -3244, -194, 15965, 5063, 14365, 7025, 24719, 5168, 8838, 8702, 15123, 50813, -7664, 18756, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00015778811939526349, 0.00019130139844492078, 9.7658943559508771e-05, 0.00082631694385781884, 0.00020553161448333412, 0.00014045092393644154, 0.0001276072725886479, 0.00033812844776548445, 0.00016468709509354085, 9.5914983830880374e-05, 0.00032606662716716528, 0.00024320965167135, 0.00036807399010285735, 0.00023174357193056494, 0.00019652643823064864, 0.00016750051872804761, 0.00016381627938244492, 0.00010304444731445983, 0.00012841897842008621, 0.00045615254202857614, 0.00031223730184137821, 0.00016685831360518932, 0.00030979744042269886, 0.00013937769108451903, 0.0001103323302231729, 0.0002535926760174334, 0.00014136094250716269, 0.00017247948562726378, 0.00029392295982688665, 0.00028772323275916278, 0.00011654393892968073, 0.00011993878433713689, 0.00011402207746868953, 0.00020153721561655402, 9.6578376542311162e-05, 0.00039825457497499883, 9.644732199376449e-05, 0.00037028174847364426, 0.00025144286337308586, 0.00014238398580346256, 0.00016141445667017251, 0.00010016828309744596, 0.00011859323421958834, 0.00015636859461665154, 0.00010995243064826354, 0.00016295447130687535, 0.00012474892719183117, 0.00017543275316711515, 0.0001557336508994922, 0.00015629634435754269, 0.00022104464005678892, 0.00030168209923431277, 0.00025208579609170556, 0.00016288622282445431, 0.00013367277279030532, 0.00013483430666383356, 0.00034451833926141262, 0.00012243272794876248, 0.00016193969349842519, 0.00031671213218942285, 9.5686984423082322e-05, 0.00010733787348726764, 0.00013763020979240537, 0.00012291902385186404, 0.00011577528493944556, 0.00019837536092381924, 0.00025910415570251644, 0.00032027374254539609, 7.392606494249776e-05, 0.00012121820327593014, 0.00018635652668308467, 0.00015428815095219761, 0.00016863335622474551, 0.00024365565332118422, 0.00012228345440234989, 0.00030695897294208407, 6.7944543843623251e-05, 0.00016267268802039325, 0.00010777084389701486, 0.00032874156022444367, 0.00018487730994820595, 0.00034007008071057498, 0.00015440961578860879, 0.00063185091130435467, 0.0001171124677057378, 0.00027940914151258767, 0.00011384297977201641, 0.00019066913228016347, 7.534098403993994e-05, 0.00032305388594977558, 0.00015847069153096527, 0.00021541042951866984, 0.00013926549581810832, 5.9102487284690142e-05, 0.00034377301926724613, 0.00015746134158689529, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 4,-22,51,127,57,-43,78,63,60,-107,-18,-32,-10,44,71,-48, 
  /* [1][0][][] */ -9,-20,43,8,54,-60,-19,-17,127,10,-17,44,-23,56,67,-19, 
  /* [2][0][][] */ 75,-101,-51,1,24,-16,18,-89,-37,37,-59,53,25,-127,32,-29, 
  /* [3][0][][] */ 127,45,3,23,-45,-15,18,-10,-54,73,36,-28,-49,9,-17,7, 
  /* [4][0][][] */ 39,-27,13,19,-127,1,-80,41,-32,-58,-4,-10,-17,-67,49,24, 
  /* [5][0][][] */ 65,-106,26,-2,-45,-127,-5,-11,-6,-54,-74,54,-50,-12,48,26, 
  /* [6][0][][] */ -101,-57,81,-6,21,-8,-5,-62,-127,18,-42,-29,-11,-32,26,111, 
  /* [7][0][][] */ 0,-4,-27,-26,57,-127,8,14,3,-65,-21,4,-3,-17,14,20, 
  /* [8][0][][] */ 22,-107,-25,-31,-11,-25,-56,-100,82,32,-70,-31,-127,-25,59,52, 
  /* [9][0][][] */ 91,-125,22,127,-11,-23,27,-19,81,-36,8,10,-56,29,9,22, 
  /* [10][0][][] */ -15,32,-9,-21,13,-32,-17,8,19,-46,-127,-53,32,-38,-11,43, 
  /* [11][0][][] */ -14,-17,-127,-14,-1,55,6,40,-26,9,47,-11,62,7,-60,6, 
  /* [12][0][][] */ 61,11,-33,1,62,-67,10,-67,13,-51,-127,-10,39,25,-13,40, 
  /* [13][0][][] */ 28,5,-22,-35,31,127,-17,-19,6,62,17,10,90,13,-27,-35, 
  /* [14][0][][] */ -17,42,-56,-21,28,-127,-16,0,96,-38,-45,-83,33,78,58,43, 
  /* [15][0][][] */ -1,-27,34,88,84,-62,15,-39,22,-42,-66,-22,-127,-16,13,12, 
  /* [16][0][][] */ -46,93,-18,2,13,127,8,34,-58,26,4,3,-5,-12,-86,-38, 
  /* [17][0][][] */ -26,-25,-51,-34,36,43,24,51,-8,127,20,17,44,34,-10,-22, 
  /* [18][0][][] */ 38,-30,-61,-67,57,-36,-27,-118,2,63,-25,127,5,-21,61,59, 
  /* [19][0][][] */ -36,2,43,-5,60,56,18,30,52,-1,39,40,-127,33,14,18, 
  /* [20][0][][] */ -65,-34,-2,-82,9,11,-45,-127,15,6,-36,14,10,-4,-9,44, 
  /* [21][0][][] */ -23,6,127,43,7,54,60,19,40,12,12,-41,-16,45,40,-38, 
  /* [22][0][][] */ -7,-1,20,47,-12,11,-17,127,15,-3,37,3,-29,2,33,-14, 
  /* [23][0][][] */ 14,-72,-20,15,-1,-120,-15,4,-28,21,32,20,-101,-9,73,127, 
  /* [24][0][][] */ 32,-121,-10,-57,-18,2,-19,32,77,-8,127,113,-2,85,88,51, 
  /* [25][0][][] */ -127,-85,-63,-86,-21,-42,7,-37,-12,-19,-47,76,28,30,-12,48, 
  /* [26][0][][] */ 76,-127,37,-17,-17,-51,-18,30,-78,-64,-30,56,6,-99,93,40, 
  /* [27][0][][] */ -127,-16,13,6,60,-23,-25,-4,24,-28,100,33,2,23,-18,-32, 
  /* [28][0][][] */ -15,13,24,32,-36,-6,8,108,7,-18,-41,-14,-127,-8,20,18, 
  /* [29][0][][] */ -14,30,-21,-35,16,-22,-16,-57,-127,7,-43,17,-12,32,-73,11, 
  /* [30][0][][] */ -30,24,-127,-44,0,3,11,-62,-79,34,-39,-5,-39,-84,-26,18, 
  /* [31][0][][] */ 43,10,-127,-48,41,13,-25,82,-16,-30,-30,38,47,-4,-61,26, 
  /* [32][0][][] */ -62,-41,127,100,-77,16,1,-13,-1,-28,67,-11,-99,-6,-29,74, 
  /* [33][0][][] */ 24,68,93,23,21,93,127,-44,-17,66,-15,-63,-49,-14,48,5, 
  /* [34][0][][] */ 50,76,-68,-100,127,-12,-52,-32,-20,-23,-67,-22,105,-12,-19,-68, 
  /* [35][0][][] */ -16,-80,127,62,66,-69,72,-27,-35,30,17,18,-39,112,16,-12, 
  /* [36][0][][] */ -127,-28,-34,-72,65,-12,22,35,-37,-24,92,87,6,-19,24,-2, 
  /* [37][0][][] */ -21,48,127,-35,-32,-31,41,10,8,-27,13,-55,14,8,11,-29, 
  /* [38][0][][] */ 6,-77,-16,-24,29,-32,-49,-53,-35,18,91,127,22,-15,-6,77, 
  /* [39][0][][] */ -19,-48,13,-41,-11,-127,58,104,21,-85,68,51,-19,74,48,30, 
  /* [40][0][][] */ 34,11,76,127,10,6,-39,67,54,-89,22,-94,-2,68,23,-35, 
  /* [41][0][][] */ -66,-101,21,-124,106,0,-28,4,42,-49,104,127,31,75,5,-3, 
  /* [42][0][][] */ 45,-14,-54,8,-127,19,-32,-23,-98,-15,95,-14,-95,6,-100,59, 
  /* [43][0][][] */ 57,44,-19,119,-38,20,127,-36,-10,119,-14,13,-54,-22,40,40, 
  /* [44][0][][] */ -17,-28,-23,18,9,79,-21,127,42,16,95,-29,84,58,-93,-46, 
  /* [45][0][][] */ 5,54,-21,-127,26,-10,79,-10,-19,59,-18,-40,72,-94,13,-63, 
  /* [46][0][][] */ -40,25,42,-17,57,18,-127,28,126,62,-86,-61,81,-3,0,-100, 
  /* [47][0][][] */ -5,-46,13,22,-106,61,-64,127,8,-49,72,-3,-43,-125,72,-5, 
  /* [48][0][][] */ -37,56,-8,-127,-55,-45,-107,16,34,-120,-30,-47,21,108,17,66, 
  /* [49][0][][] */ 32,17,-2,62,66,25,76,29,-127,58,47,74,13,0,64,34, 
  /* [50][0][][] */ -41,107,11,-90,30,98,4,29,-23,-9,65,34,92,-64,-57,-127, 
  /* [51][0][][] */ 127,98,12,119,48,-24,-45,78,39,-51,-94,20,-1,93,100,-97, 
  /* [52][0][][] */ -39,40,127,-70,-9,-24,13,-40,-9,-14,50,-5,-8,42,6,17, 
  /* [53][0][][] */ 25,-7,31,-127,-15,-65,12,-45,-50,-31,-8,-2,-50,-15,46,74, 
  /* [54][0][][] */ 36,51,-32,21,-76,31,-30,42,20,-115,-3,-85,-39,127,4,38, 
  /* [55][0][][] */ 11,-58,22,-5,8,-25,8,-127,-4,-12,24,28,-22,-25,-20,-2, 
  /* [56][0][][] */ 25,13,26,67,-31,-5,6,127,3,-17,-3,2,22,11,-23,6, 
  /* [57][0][][] */ 38,63,127,-114,99,-73,32,-40,-9,-86,-119,4,45,-45,52,-23, 
  /* [58][0][][] */ 120,-49,25,97,-127,-66,-2,17,21,-13,23,-2,-70,-22,39,42, 
  /* [59][0][][] */ 66,12,-31,15,-31,-22,-2,-10,-60,-22,-127,-31,-16,-13,0,39, 
  /* [60][0][][] */ -127,-7,-8,14,10,36,-58,34,55,57,46,-13,-12,-29,-9,-71, 
  /* [61][0][][] */ 13,87,73,-7,127,19,28,-91,-69,-62,-25,67,48,-63,-121,-10, 
  /* [62][0][][] */ -6,-61,-12,127,-7,113,58,40,27,72,99,-16,-27,86,-71,-46, 
  /* [63][0][][] */ 90,-53,79,-68,64,-64,36,-127,-12,113,58,66,4,-90,25,60, 
  /* [64][0][][] */ 54,-27,14,20,49,-71,7,-127,66,47,-1,7,-75,-103,40,51, 
  /* [65][0][][] */ 0,49,12,20,-5,-30,-1,34,-9,-127,-37,-73,-37,-29,43,-19, 
  /* [66][0][][] */ -70,9,-38,-49,-35,-34,31,-53,-57,-15,-44,90,47,36,60,127, 
  /* [67][0][][] */ -26,-17,26,38,37,-3,0,0,-2,127,69,34,-82,-49,-78,-35, 
  /* [68][0][][] */ 6,-25,-86,58,-113,-48,57,-127,-69,47,33,-41,38,-108,-21,39, 
  /* [69][0][][] */ -127,14,108,67,45,59,99,-85,69,94,90,29,-104,-71,39,-38, 
  /* [70][0][][] */ 12,-14,-8,71,11,86,122,6,64,127,31,-83,-34,9,-8,6, 
  /* [71][0][][] */ -28,28,67,118,3,-127,-44,95,22,-84,28,-75,-48,1,22,-3, 
  /* [72][0][][] */ -84,-9,-43,14,-70,-3,15,-44,-22,-108,-116,-16,38,23,7,127, 
  /* [73][0][][] */ 24,-82,-6,25,19,-78,-55,-48,127,-1,30,41,-50,127,43,44, 
  /* [74][0][][] */ 1,-21,-12,101,-58,9,18,67,50,-69,-127,-87,-103,7,15,-22, 
  /* [75][0][][] */ -14,-11,-26,127,-23,11,-3,2,-33,-20,-27,-74,9,9,1,-76, 
  /* [76][0][][] */ 10,-38,-3,28,-4,0,-2,-127,-51,-55,30,24,-115,-69,44,-2, 
  /* [77][0][][] */ 102,-127,-93,69,-18,4,1,-37,21,96,5,92,54,4,-49,96, 
  /* [78][0][][] */ -43,127,-62,-5,-20,94,26,42,67,22,-16,-103,-36,107,-3,-64, 
  /* [79][0][][] */ -12,52,36,-1,45,50,-26,4,44,-57,44,-13,127,22,-11,-42, 
  /* [80][0][][] */ 9,-40,-35,119,-69,75,65,83,-26,58,17,-92,75,25,-127,15, 
  /* [81][0][][] */ 23,49,-31,10,123,82,-8,-35,-25,-50,-10,-32,0,-21,-127,-39, 
  /* [82][0][][] */ 71,48,-44,53,-127,33,7,25,-50,26,45,-22,13,55,-19,-3, 
  /* [83][0][][] */ 127,42,12,-38,-20,-30,0,42,-17,18,29,-45,7,-47,15,-39, 
  /* [84][0][][] */ 51,53,-56,-21,127,-30,-64,-67,-32,-5,-73,-19,48,-11,-45,-37, 
  /* [85][0][][] */ -28,20,19,-21,-29,-20,29,127,-2,-20,6,-54,-5,38,53,15, 
  /* [86][0][][] */ 91,-117,108,63,65,-85,-64,-29,127,68,-69,14,-45,41,81,-31, 
  /* [87][0][][] */ 16,34,-1,29,15,116,127,61,-51,12,22,-40,6,-50,23,-19, 
  /* [88][0][][] */ 24,-84,-12,27,20,-55,-32,4,58,-55,-12,2,-41,55,127,-5, 
  /* [89][0][][] */ 45,21,-32,-30,25,-32,-88,19,41,-127,-66,-37,22,-5,45,41, 
  /* [90][0][][] */ 24,-70,19,65,97,-81,-1,-101,127,67,-10,103,-23,-6,55,-39, 
  /* [91][0][][] */ -48,1,-82,-44,43,-67,-50,-15,-52,-6,-44,63,32,-127,-76,12, 
  /* [92][0][][] */ -55,33,127,70,38,43,-35,10,-20,26,-44,-6,-38,43,36,-26, 
  /* [93][0][][] */ 127,-110,-10,35,-57,-52,23,51,-65,62,-38,23,-89,-1,-13,18, 
  /* [94][0][][] */ 35,-30,82,-29,69,-127,1,-70,13,-67,-60,40,-3,31,5,8, 
  /* [95][0][][] */ -89,46,9,39,-21,69,60,20,-18,33,127,16,46,78,-35,-26, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00062286929460242391, 0.00075516314245760441, 0.00038550913450308144, 0.0032618897967040539, 0.00081133696949109435, 0.00055443064775317907, 0.00050373026169836521, 0.0013347635976970196, 0.00065010302932932973, 0.00037862482713535428, 0.0012871494982391596, 0.00096007122192531824, 0.0014529736945405602, 0.00091480882838368416, 0.00077578902710229158, 0.00066120905103161931, 0.000646665517706424, 0.00040676843491382897, 0.00050693447701632977, 0.001800664234906435, 0.0012325581628829241, 0.00065867393277585506, 0.0012229267740622163, 0.00055019406136125326, 0.00043553736759349704, 0.0010010582627728581, 0.00055802293354645371, 0.00068086356623098254, 0.0011602622689679265, 0.0011357887415215373, 0.00046005772310309112, 0.00047345890197902918, 0.00045010267058387399, 0.00079556909622624516, 0.00038124358979985118, 0.0015721117379143834, 0.00038072624010965228, 0.0014616888947784901, 0.00099257181864231825, 0.000562061439268291, 0.00063718430465087295, 0.00039541473961435258, 0.00046814733650535345, 0.00061726575950160623, 0.00043403770541772246, 0.00064326351275667548, 0.00049244693946093321, 0.00069252157118171453, 0.00061475927941501141, 0.00061698054196313024, 0.00087257474660873413, 0.0011908914893865585, 0.00099510978907346725, 0.00064299412770196795, 0.0005276738665997982, 0.00053225905867293477, 0.001359987654723227, 0.00048330376739613712, 0.00063925766153261065, 0.0012502225581556559, 0.00037772479117847979, 0.00042371673043817282, 0.00054329587146639824, 0.00048522339784540236, 0.00045702347415499389, 0.00078308762749657035, 0.0010228147730231285, 0.0012642820365726948, 0.0002918234677053988, 0.00047850940609350801, 0.00073564326157793403, 0.0006090531824156642, 0.00066568091278895736, 0.00096183177083730698, 0.00048271450214087963, 0.0012117219157516956, 0.00026821138453669846, 0.00064215116435661912, 0.00042542588198557496, 0.0012977088335901499, 0.00072980404365807772, 0.0013424281496554613, 0.00060953263891860843, 0.0024942343588918447, 0.00046230200678110123, 0.001102968817576766, 0.00044939568033441901, 0.00075266725616529584, 0.00029740887111984193, 0.0012752566253766418, 0.00062556378543376923, 0.00085033365758135915, 0.00054975115926936269, 0.00023330733529292047, 0.0013570456067100167, 0.00062157935462892056, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -27648, 9340, 623, -15804, 9112, -18771, -23000, -46917, 3319, 27175, 27773, 8415, 11164, -29419, 9196, -27549, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00047595944488421082, 0.00048822004464454949, 0.0007372829713858664, 0.00092828128254041076, 0.00058170006377622485, 0.00057152606314048171, 0.0005970221827737987, 0.00048960477579385042, 0.00043713318882510066, 0.00042699562618508935, 0.00041657450492493808, 0.00038904929533600807, 0.00049613782903179526, 0.00074575090548023582, 0.00023818167392164469, 0.00027979127480648458, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 11,23,-3,23,25,-25,0,65,-45,-11,12,23,-16,15,38,8,10,-26,1,-5,35,6,-5,127,14,71,4,-24,18,2,18,-14,-32,76,35,-17,13,29,0,-17,-52,-32,27,50,49,22,-122,-42, 
  /* [1][0][][] */ -55,-13,-27,12,-28,15,38,57,-58,-49,-34,-51,-28,9,-18,-2,-51,127,-71,51,-27,1,-57,-20,23,-24,24,24,-68,-126,-52,-21,-42,-5,10,-2,-7,-32,27,50,-23,-35,77,8,30,-9,-8,13, 
  /* [2][0][][] */ -15,5,-22,-70,3,-23,10,-31,10,-13,29,32,7,20,-23,2,-9,-3,-10,-14,-1,8,9,-127,11,59,0,-12,7,3,-5,-17,-6,38,15,-16,29,45,9,40,-54,20,3,34,15,-8,34,28, 
  /* [3][0][][] */ -14,42,26,-41,-8,-3,-4,-6,-13,-11,-26,32,-127,-2,1,8,12,7,-11,-15,-9,29,-20,13,-21,20,4,12,-16,29,8,37,-13,-6,27,20,7,20,55,8,8,9,48,-18,-1,-2,-6,18, 
  /* [4][0][][] */ 30,-33,-22,-6,38,10,60,-9,-52,5,-18,-38,4,18,-16,-3,26,-14,-87,-18,-30,11,14,52,-5,-18,10,45,17,-77,48,-18,12,-24,21,-127,-4,26,4,-14,-20,17,2,-17,-6,-26,-4,23, 
  /* [5][0][][] */ -10,3,6,54,-6,7,5,58,3,-13,22,9,-2,18,6,8,-40,13,22,-3,29,39,16,-21,-11,-44,27,-16,31,5,17,-6,42,-127,4,25,-14,-44,16,60,-52,59,45,3,-54,-16,-74,-22, 
  /* [6][0][][] */ 18,-28,14,28,-17,8,33,-16,-4,17,-15,-7,-16,4,8,10,26,-18,127,-7,14,25,20,-31,7,21,42,-16,-8,-1,12,20,-24,4,32,-51,13,-36,76,50,6,-5,20,22,-11,-21,-6,-4, 
  /* [7][0][][] */ -64,13,27,-15,-35,88,-25,24,-1,101,-15,127,54,13,-44,10,-18,0,-16,-56,-7,-19,-20,37,-41,-9,-35,-36,-17,2,-38,-19,-9,-14,-34,12,51,-17,99,6,-13,41,-64,-57,-2,-9,8,45, 
  /* [8][0][][] */ -6,-18,-25,-30,3,-11,-27,25,-34,14,13,86,50,-4,-40,-17,6,81,-50,-13,-50,-33,11,12,-43,1,-39,76,-22,124,-12,-7,-11,2,-71,-112,-127,98,34,-19,6,28,71,-40,17,23,6,16, 
  /* [9][0][][] */ -53,-2,-5,20,26,-32,12,15,67,-55,24,42,-34,-89,33,-12,-12,-8,-71,-42,26,33,79,-18,16,-32,6,-37,33,38,43,14,17,-12,92,-114,-42,-127,-75,60,-16,40,81,34,-57,31,5,-52, 
  /* [10][0][][] */ -10,-20,-26,-127,38,89,5,0,5,72,82,36,50,-28,-32,40,34,-42,73,-50,62,-35,44,35,-67,-105,14,-21,68,53,50,-56,-34,-81,8,-30,5,-41,-15,-64,-44,-16,-8,-17,-47,6,56,-65, 
  /* [11][0][][] */ 49,15,-7,45,33,-64,-19,-22,7,45,0,14,18,27,0,-55,49,-8,34,-10,-5,-70,41,22,14,-75,12,-17,50,-8,78,-43,72,1,-9,-85,34,12,-45,-127,30,46,53,-42,-35,31,38,-30, 
  /* [12][0][][] */ 97,-9,-45,44,17,-8,16,127,23,-4,-76,-38,12,15,-14,7,-15,6,-17,7,-28,11,-20,18,-20,7,-8,22,5,0,27,-11,4,-57,-19,-14,-61,-61,-30,-15,-4,-76,-13,-124,-82,-17,60,-10, 
  /* [13][0][][] */ -3,5,-20,-10,21,-13,3,13,1,35,12,46,-12,17,-17,9,-4,-1,24,0,18,-16,4,-6,-4,1,0,127,12,10,20,16,5,13,-35,22,17,1,16,-45,-32,-3,4,-1,-3,-33,1,-7, 
  /* [14][0][][] */ 60,-23,39,-69,53,6,48,-80,-28,34,-18,127,-65,37,-5,8,11,34,-29,31,42,19,82,23,3,105,-96,-72,56,-17,47,35,-54,85,-114,-37,0,38,89,0,-46,-2,34,-36,19,-14,-12,12, 
  /* [15][0][][] */ 58,-25,-71,-45,79,10,61,-87,-12,24,-45,-20,38,70,-85,14,77,38,106,-41,-40,-51,102,4,-127,48,47,26,35,73,42,-19,14,82,105,113,18,-43,-53,-59,66,22,106,-33,49,29,-50,77, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.020228276029229164, 0.020749351009726524, 0.031334526836872101, 0.039451953023672104, 0.024722252041101456, 0.024289857596158981, 0.025373442098498344, 0.020808203145861626, 0.018578160554170609, 0.018147313967347145, 0.017704416066408157, 0.016534594818949699, 0.021085856482386589, 0.031694412231445312, 0.010122721083462238, 0.011891128495335579, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 13025, 28513, -583, 56194, 3590, 137955, -6471, 63208, 4185, 33912, 32345, -2225, -305, 28066, -2148, -6041, -2567, -1042, 2492, 1115, 3609, -8473, 371, -25110, -4328, 43648, 164554, 86961, 496, 1018, -3260, -1631, 29324, -570, 37446, -1935, 52887, 6413, 36135, 7601, 8327, 119753, 7369, 3639, 68404, -3741, 2170, 62365, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 4.3973432184429839e-05, 2.7224621589994058e-05, 0.00019810911908280104, 4.3724150600610301e-05, 0.00013635458890348673, 5.7214532716898248e-05, 0.00012494849215727299, 8.497743692714721e-05, 5.1779225032078102e-05, 3.890867083100602e-05, 3.4183263778686523e-05, 8.5506297182291746e-05, 4.2851203033933416e-05, 3.5237411793787032e-05, 0.00016486262029502541, 0.0001009972911560908, 0.00023487320868298411, 5.4759959311923012e-05, 7.4744224548339844e-05, 0.00012290105223655701, 4.707930565928109e-05, 0.00014840601943433285, 0.0001550359302200377, 0.00013254830264486372, 0.00011322674981784075, 0.00010675445082597435, 1.9487542886054143e-05, 6.9811336288694292e-05, 0.0001756435667630285, 0.00013703377044294029, 0.00012767896987497807, 0.00018690546858124435, 3.3588905353099108e-05, 5.9834004787262529e-05, 2.9344375434448011e-05, 5.3632804338121787e-05, 0.00011009625450242311, 6.6046712163370103e-05, 0.0001562766992719844, 8.5254221630748361e-05, 5.1434941269690171e-05, 4.722358426079154e-05, 5.3496729378821328e-05, 7.6915894169360399e-05, 2.2063657524995506e-05, 0.00014202354941517115, 9.0035915491171181e-05, 1.9737528418772854e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 71,-114,107,89,59,-38,88,-62,62,-109,-105,59,64,-32,-52,-93,106,101,40,73,68,-63,-77,59,-39,-44,-78,-51,-71,79,-66,-106,0,48,77,76,-79,50,-54,-35,58,-67,59,54,-95,0,73,-56, 85,-127,127,73,-84,-66,-49,-87,105,-113,-92,79,89,-97,-90,79,-31,98,75,127,106,-113,48,75,-58,-79,-58,-69,45,108,-27,-119,-98,89,79,82,-94,73,-87,-20,82,-95,78,81,-87,-127,100,-104, 27,-66,68,33,13,-55,-40,-38,48,-32,-8,50,36,-65,-57,-8,-57,54,34,68,35,-55,36,23,-33,-54,-51,-15,38,42,99,-90,-79,28,32,47,-49,42,-52,-21,38,-41,26,44,-46,-11,44,-67, 
  /* [0][1][][] */ 93,-99,-40,93,56,-91,127,-86,95,-127,-92,92,95,-82,-14,-127,127,111,89,-45,70,109,-127,68,65,-60,-115,-100,-127,81,-72,-7,-86,93,104,111,-91,78,-92,85,84,-120,103,87,-61,116,81,-78, 127,-120,-74,127,-127,-127,-83,-127,127,-119,-127,127,127,-127,-19,86,-55,127,127,-48,127,127,62,127,127,-127,-127,-127,47,127,-33,24,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-2,127,-127, 65,-96,-36,77,47,-75,-40,-73,42,-43,-76,72,60,-41,-26,19,-54,54,52,-26,51,67,48,56,60,-66,-71,-46,49,50,127,8,-61,91,46,58,-47,71,-79,59,54,-66,58,66,-92,-54,52,-83, 
  /* [0][2][][] */ 61,-76,-53,93,33,-64,61,-46,49,-88,-23,57,63,-62,76,-81,73,51,25,-55,19,4,-74,41,-30,-40,-84,-40,-74,41,-43,93,-84,50,60,46,-31,48,-55,-112,52,-70,68,56,-21,17,35,-83, 75,-86,-68,115,-58,-75,-68,-84,59,-97,-79,68,75,-68,127,28,-30,63,62,-51,51,-14,33,78,-42,-69,-94,-50,28,71,-34,127,-69,78,51,51,-50,74,-71,-127,73,-72,77,73,-91,62,51,-57, 37,-68,-34,67,33,-25,-24,-43,14,-55,-69,39,39,-5,63,26,-26,19,30,-52,20,17,45,46,-18,-48,-73,-12,39,37,70,69,-23,45,11,15,-31,44,-33,-81,28,-35,32,34,-115,13,34,-43, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0018688708078116179, 0.0011570464121177793, 0.008419637568295002, 0.0018582764314487576, 0.0057950699701905251, 0.002431617584079504, 0.0053103105165064335, 0.0036115408875048161, 0.0022006169892847538, 0.0016536184120923281, 0.0014527887105941772, 0.003634017426520586, 0.0018211760325357318, 0.0014975899830460548, 0.0070066610351204872, 0.0042923847213387489, 0.009982110932469368, 0.002327298279851675, 0.0031766295433044434, 0.0052232947200536728, 0.0020008704159408808, 0.0063072554767131805, 0.0065890266560018063, 0.0056333029642701149, 0.0048121367581188679, 0.004537064116448164, 0.00082822056720033288, 0.0029669818468391895, 0.0074648517183959484, 0.0058239353820681572, 0.005426356103271246, 0.0079434821382164955, 0.0014275284484028816, 0.0025429450906813145, 0.0012471359223127365, 0.0022793940734118223, 0.0046790908090770245, 0.0028069852851331234, 0.0066417595371603966, 0.0036233044229447842, 0.00218598498031497, 0.0020070022437721491, 0.0022736110258847475, 0.0032689254730939865, 0.00093770545208826661, 0.0060360007919371128, 0.0038265264593064785, 0.00083884497871622443, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 399, 1266, 3890, 920, 5076, 26279, 2811, 531, -212, -670, 1456, 1001, 3318, 679, 29175, 3773, 4727, -646, -164, 307, -1359, 16533, 10362, 12404, 3315, 817, 5556, 3919, 8007, -944, 9071, 9125, 1241, -181, 4589, 3905, -1489, -32, -2461, 7844, 1398, -42, -1379, -139, 1037, 3069, 1901, 1162, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00039090466452762485, 0.00074613664764910936, 0.00018468596681486815, 0.00041487716953270137, 0.00034896601573564112, 0.00015891171642579138, 0.00035172424395568669, 0.00029443198582157493, 0.00061734509654343128, 0.00084411370335146785, 0.00086957198800519109, 0.0004004526708740741, 0.00041587965097278357, 0.00093880633357912302, 0.00012925102782901376, 0.00031697153463028371, 0.00014190723595675081, 0.00043145092786289752, 0.00054111256031319499, 0.00052913103718310595, 0.00033937577973119915, 0.0001617677480680868, 0.00031648683943785727, 0.00013955745089333504, 0.00041102862451225519, 0.00018785189604386687, 0.0012594358995556831, 0.00036019278923049569, 0.00022048465325497091, 0.00044702010927721858, 0.00026205656467936933, 0.00015238508058246225, 0.00068162684328854084, 0.0003956765285693109, 0.00072764040669426322, 0.0004526795819401741, 0.00085928913904353976, 0.00052226701518520713, 0.00016754692478571087, 0.00027537360438145697, 0.0001758974976837635, 0.00031168261193670332, 0.00036456112866289914, 0.00046558870235458016, 0.0020655221305787563, 0.00039113714592531323, 0.00023555620282422751, 0.0012832542415708303, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,14,-19,103,-52,69,18,-2, 
  /* [1][0][][] */ -61,37,19,31,4,-93,64,127, 
  /* [2][0][][] */ -61,30,42,44,-127,5,24,-52, 
  /* [3][0][][] */ 31,86,33,-127,-87,105,93,-9, 
  /* [4][0][][] */ -86,39,127,38,83,-22,62,-37, 
  /* [5][0][][] */ -127,-65,23,-28,-109,86,31,108, 
  /* [6][0][][] */ 21,-127,-2,-65,122,29,-50,50, 
  /* [7][0][][] */ -116,45,31,126,127,-19,-7,6, 
  /* [8][0][][] */ 24,23,9,-127,25,-48,-11,-26, 
  /* [9][0][][] */ -63,-127,-20,-75,-9,55,-23,20, 
  /* [10][0][][] */ -87,2,57,99,-127,81,10,-50, 
  /* [11][0][][] */ 71,-6,3,-31,-41,-36,-32,-127, 
  /* [12][0][][] */ 23,-11,-14,14,8,-42,127,57, 
  /* [13][0][][] */ 23,-18,61,-41,84,106,123,-127, 
  /* [14][0][][] */ 95,103,48,-36,-16,127,38,59, 
  /* [15][0][][] */ -46,-127,46,0,-10,4,-24,56, 
  /* [16][0][][] */ -127,-60,-30,67,-64,-34,-25,-71, 
  /* [17][0][][] */ -50,62,-109,-49,6,-90,127,-95, 
  /* [18][0][][] */ 127,-45,-51,-1,-63,16,-17,89, 
  /* [19][0][][] */ 71,-31,-19,-5,87,-66,127,-17, 
  /* [20][0][][] */ 109,-39,62,121,-28,96,-8,-127, 
  /* [21][0][][] */ 80,-41,-127,32,72,120,-97,-46, 
  /* [22][0][][] */ -127,-50,-20,10,-66,8,-76,-68, 
  /* [23][0][][] */ -32,-39,-18,11,-127,56,53,-17, 
  /* [24][0][][] */ 106,17,-10,56,-10,-127,48,-37, 
  /* [25][0][][] */ 127,79,74,-22,123,41,121,-47, 
  /* [26][0][][] */ -51,-101,-36,-3,-33,-127,44,-50, 
  /* [27][0][][] */ -14,-127,34,-9,-6,-37,43,5, 
  /* [28][0][][] */ -67,9,-48,44,9,-89,127,101, 
  /* [29][0][][] */ -12,43,33,1,-24,51,-82,-127, 
  /* [30][0][][] */ 127,33,-24,-55,-124,-127,-97,-93, 
  /* [31][0][][] */ 50,35,126,6,-37,-26,127,77, 
  /* [32][0][][] */ -49,17,7,18,-95,-106,-127,-25, 
  /* [33][0][][] */ -47,34,20,30,-127,-78,-49,11, 
  /* [34][0][][] */ -17,-127,89,-31,22,98,-42,39, 
  /* [35][0][][] */ -16,-43,-127,-16,-10,-56,14,-35, 
  /* [36][0][][] */ 48,127,9,-14,-18,18,-4,-15, 
  /* [37][0][][] */ -127,41,18,-4,45,-26,5,-76, 
  /* [38][0][][] */ -101,-49,-70,-14,-17,39,55,127, 
  /* [39][0][][] */ -5,49,125,46,-83,-127,114,-10, 
  /* [40][0][][] */ -37,-6,-37,-26,-127,126,105,3, 
  /* [41][0][][] */ -85,91,0,-97,-110,-127,-60,103, 
  /* [42][0][][] */ -29,-126,-41,5,33,127,-46,-27, 
  /* [43][0][][] */ -29,-15,-3,-83,127,84,-7,-46, 
  /* [44][0][][] */ 127,-13,8,-49,75,15,-25,49, 
  /* [45][0][][] */ -9,-127,39,-15,4,-5,45,3, 
  /* [46][0][][] */ 96,32,22,-34,127,-81,15,23, 
  /* [47][0][][] */ 109,1,-17,127,-20,10,-15,-61, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00062545249238610268, 0.0011938281822949648, 0.00029549992177635431, 0.00066380877979099751, 0.00055835011880844831, 0.00025426078354939818, 0.00056276330724358559, 0.00047109494335018098, 0.00098776002414524555, 0.0013505927054211497, 0.0013913263101130724, 0.00064072938403114676, 0.00066541275009512901, 0.001502102124504745, 0.0002068033063551411, 0.0005071585183031857, 0.00022705340234097093, 0.00069032702594995499, 0.00086578703485429287, 0.00084661645814776421, 0.00054300558986142278, 0.00025883046328090131, 0.00050638301763683558, 0.00022329371131490916, 0.0006576510495506227, 0.00030056544346734881, 0.0020151135977357626, 0.00057631306117400527, 0.00035277826827950776, 0.00071523792576044798, 0.00041929387953132391, 0.00024381808179896325, 0.0010906116804108024, 0.00063308753306046128, 0.001164234010502696, 0.00072429311694577336, 0.0013748736819252372, 0.00083563389489427209, 0.00026807721587829292, 0.00044060131767764688, 0.00028143826057203114, 0.00049869617214426398, 0.0005833024624735117, 0.00074494787259027362, 0.003304861718788743, 0.00062582443933933973, 0.00037689294549636543, 0.002053223317489028, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { -32423, 19609, -27113, -12009, 8970, 19368, 23186, 32142, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00044813644490204751, 0.0004904099041596055, 0.0011522889835759997, 0.0012515038251876831, 0.00057704973733052611, 0.00025555267347954214, 0.0003893787506967783, 0.00060788431437686086, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -60,-51,5,-51,9,-26,-5,-51,-90,127,-23,91,22,1,102,-9,-26,-28,-17,-38,-33,-41,-40,-10,8,-82,21,58,12,82,13,-62,-19,-73,63,2,-56,7,18,-21,62,17,81,-37,-7,-19,-39,8, 
  /* [1][0][][] */ -37,-18,127,8,-10,-24,-9,-85,-18,28,3,-9,-21,2,-1,-92,21,-66,-1,-33,-46,21,38,-35,-14,-31,-20,22,-8,39,32,-8,6,29,-15,31,-49,-14,27,-41,-1,23,43,34,-22,7,35,-25, 
  /* [2][0][][] */ -6,-70,14,-31,47,33,-4,-50,-33,-7,18,30,-33,70,-2,-15,-54,127,-21,-10,-2,51,-52,-38,121,15,-22,10,-79,13,-12,-56,10,12,6,68,-37,10,-19,-8,22,-17,-36,13,23,51,-39,-40, 
  /* [3][0][][] */ 0,-73,12,34,9,-37,17,17,-2,-17,17,-5,33,-7,23,20,4,-30,-10,17,-35,10,-9,12,8,66,3,-18,-50,26,127,-17,3,36,-19,5,-17,-3,-16,12,3,-7,-59,67,-5,11,11,15, 
  /* [4][0][][] */ -101,-9,-4,-11,-5,-106,-5,-2,1,17,8,27,-43,-4,-13,-22,3,3,7,32,-19,-27,-16,-24,-11,10,11,127,-5,11,3,-87,14,-118,-19,10,-1,-7,-11,-21,-39,22,-12,12,-27,15,-6,-12, 
  /* [5][0][][] */ -36,103,37,1,-34,108,-8,74,57,-63,94,7,-41,-7,-107,43,-17,-32,7,54,80,37,-58,73,16,37,-127,-29,10,-65,3,6,-30,-54,-58,-74,69,-19,4,22,-22,-74,-61,19,100,-9,-68,-17, 
  /* [6][0][][] */ -25,-48,-72,24,5,-42,-32,-22,-30,-5,29,24,-41,12,71,-34,47,6,8,-8,5,98,-11,-77,-26,-47,-36,-29,31,38,-33,26,38,-89,16,50,-35,-95,-6,-23,-3,8,29,31,127,-53,65,35, 
  /* [7][0][][] */ 0,63,-85,38,-23,5,15,85,-76,7,94,37,-7,-37,-7,6,50,-126,45,32,102,100,0,-21,17,-61,37,66,-35,18,3,15,-45,10,48,-44,32,-127,-41,-98,32,-37,61,91,-60,12,-41,12, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.019045798107981682, 0.020842419937252998, 0.048972278833389282, 0.053188912570476532, 0.024524614214897156, 0.010860987938940525, 0.016548596322536469, 0.025835081934928894, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -44538, -1205, 8054, 949, 1829, -6174, 1230, 19291, 2082, 23622, -531, 20457, -12353, -1303, 38706, 13600, 123, 12466, 35696, 1733, 792, -691, -6150, 26768, -4614, 11928, 44971, 21136, 3641, 1742, -3426, 311, 2798, 14218, -5027, 14598, -10539, 12150, -28757, 121100, 30063, 18802, 4840, -1420, 9608, 3030, -291, 2688, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.0003141925553791225, 0.00026668704231269658, 0.00021465485042426735, 0.00046835734974592924, 0.00013195375504437834, 0.00014869414735585451, 0.00096338411094620824, 0.00019260628323536366, 0.00017876784841064364, 0.00021699527860619128, 0.00011099492985522375, 0.00023450536536984146, 0.00019836270075757056, 0.00028533567092381418, 7.4529525591060519e-05, 0.00011234374687774107, 0.00028063709032721817, 0.00038278111605904996, 6.2533348682336509e-05, 0.00014938741514924914, 0.00026301093748770654, 0.00049769639736041427, 0.00031566608231514692, 8.3300117694307119e-05, 0.00031132542062550783, 0.00032664448372088373, 0.00034022275940515101, 0.00016306847101077437, 0.00027067225892096758, 0.00029375305166468024, 8.0787460319697857e-05, 0.00034706227597780526, 0.00041554772178642452, 0.0001889777195174247, 0.00019492459250614047, 0.00017667148495092988, 0.00031219626544043422, 0.00020321727788541466, 0.00018260935030411929, 2.1248921257210895e-05, 0.0001080169968190603, 4.4666801841231063e-05, 0.00032444315729662776, 0.00025573719176463783, 0.00018668094708118588, 8.386773697566241e-05, 0.00020662517636083066, 8.5623665654566139e-05, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -1,-5,20,112,7,79,6,31,16,2,8,7,0,-12,-50,10,0,10,-10,-97,-9,-21,127,-3,-19,12,-2,9,-17,5,16,91,15,32,37,-24,1,29,1,11,21,-74,-4,-8,24,3,-8,-9, 125,11,13,-127,26,94,9,13,124,127,14,42,-44,-26,3,11,127,-53,-44,-42,-112,26,-103,20,19,79,-30,-84,19,27,18,-127,2,-57,127,10,-44,-52,-13,127,-74,-114,-30,8,-29,-11,-127,22, -43,-2,6,12,0,71,8,19,27,8,-5,28,-8,-6,18,6,-107,28,7,80,-39,-13,-13,-2,-17,-63,-1,36,-21,11,13,-24,12,-19,11,-18,-2,42,49,-7,54,34,-16,15,-40,1,7,-6, 
  /* [0][1][][] */ 127,5,0,-95,19,-35,40,-15,9,4,-18,53,4,-5,5,-33,3,-48,-47,-74,8,-74,-121,-15,-8,108,-12,-127,-15,31,4,-109,10,-51,-4,127,-2,57,-38,28,-61,-127,44,-90,-42,-11,-12,-4, 23,-127,-127,115,-127,-127,-125,-127,-127,-99,127,-127,127,127,29,-127,-86,127,127,-96,127,127,114,127,127,-127,-127,32,-127,-127,100,126,-127,127,-34,-40,127,-127,127,109,127,-85,127,127,127,-121,112,105, 43,5,45,-17,6,-63,46,19,-25,15,-112,-11,4,-43,127,2,61,-65,-68,85,11,-45,17,-32,-8,5,-37,77,20,46,8,6,36,-42,4,65,-3,61,82,-14,-80,4,-84,-30,24,-17,-12,5, 
  /* [0][2][][] */ -58,-4,25,-16,13,39,-37,24,8,-31,1,32,15,-7,-49,17,6,22,-16,109,10,-33,-12,-12,-18,29,-2,48,-10,-1,35,-26,-26,-43,-39,-35,0,28,13,-30,9,-21,51,-39,-31,24,-12,18, 64,126,72,17,20,-16,127,37,15,-6,40,24,-1,-2,-99,25,-59,-55,-36,127,-40,50,15,16,24,-61,-46,32,85,0,127,29,77,-22,0,-34,-22,-18,-23,98,-28,-24,-37,43,28,-29,11,-127, -52,2,2,-13,9,-6,-60,9,-24,-11,-49,-45,27,-10,-14,10,34,25,-20,-107,29,-10,11,-13,-16,8,-10,-49,-12,9,13,19,-19,88,-48,-24,-3,34,34,-63,4,-8,-38,6,-39,127,-1,-5, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.013353182934224606, 0.011334198527038097, 0.0091228308156132698, 0.01990518718957901, 0.005608034785836935, 0.0063195014372467995, 0.040943823754787445, 0.0081857666373252869, 0.0075976336374878883, 0.0092222988605499268, 0.0047172843478620052, 0.0099664777517318726, 0.0084304148331284523, 0.012126765213906765, 0.0031675049103796482, 0.0047746091149747372, 0.011927076615393162, 0.016268197447061539, 0.0026576672680675983, 0.0063489647582173347, 0.011177964508533478, 0.02115209586918354, 0.013415808789432049, 0.0035402548965066671, 0.013231329619884491, 0.013882390223443508, 0.014459467492997646, 0.0069304099306464195, 0.011503570713102818, 0.012484504841268063, 0.0034334671217948198, 0.014750146307051182, 0.017660778015851974, 0.0080315526574850082, 0.0082842949777841568, 0.007508537732064724, 0.013268341310322285, 0.0086367344483733177, 0.0077608972787857056, 0.00090307911159470677, 0.0045907222665846348, 0.0018983390182256699, 0.01378883421421051, 0.010868830606341362, 0.0079339398071169853, 0.0035643787123262882, 0.0087815700098872185, 0.0036390055902302265, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 50828, 8502, 10834, 6348, 1966, 15906, -1694, -96, 655, 3063, 3129, 1423, 2214, -536, 1218, -1770, 7307, 13493, -330, 16910, 4190, 7941, 9925, -1049, 4432, 5400, 17597, 15853, -66, -3183, 212, 1548, -2648, 7470, 4472, 7851, 8415, 3555, 45235, 2586, -867, 1583, 5028, 2696, 8559, 2301, -1924, 3862, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 8.6278974777087569e-05, 0.00027588001103140414, 0.00016603081894572824, 0.00050857872702181339, 0.0012079139705747366, 0.00028801412554457784, 0.0012194941518828273, 0.0012235387694090605, 0.00060556596145033836, 0.00039362258394248784, 0.00065505132079124451, 0.00033146003261208534, 0.00055806338787078857, 0.0006052324315533042, 0.00052237289492040873, 0.0019582938402891159, 0.00022317851835396141, 0.00031316917738877237, 0.0011530086630955338, 0.00015769577294122428, 0.00025243140407837927, 0.00015965690545272082, 0.0003504326450638473, 0.0007739993161521852, 0.0003220458747819066, 0.0002565571921877563, 0.00022131213336251676, 0.00022525775420945138, 0.00086059811292216182, 0.00085305259563028812, 0.00061139883473515511, 0.00036561550223268569, 0.00082621612818911672, 0.00026612874353304505, 0.00029117072699591517, 0.00025760283460840583, 0.00039252813439816236, 0.00036804462433792651, 5.5377528042299673e-05, 0.001834105234593153, 0.00075974699575453997, 0.0014990696217864752, 0.00019327555492054671, 0.00049977080198004842, 0.0001621418196009472, 0.00036463458673097193, 0.00054890126921236515, 0.00073845701990649104, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 1,-17,-23,22,127,5,3,9, 
  /* [1][0][][] */ 14,38,-10,127,25,9,29,1, 
  /* [2][0][][] */ 28,-120,-22,31,9,-127,71,57, 
  /* [3][0][][] */ 127,-27,-10,-11,-20,-9,31,-8, 
  /* [4][0][][] */ 89,-45,127,-25,-19,-57,22,-26, 
  /* [5][0][][] */ 127,-83,11,6,39,127,-118,-49, 
  /* [6][0][][] */ 49,71,23,76,55,32,-127,-21, 
  /* [7][0][][] */ -26,127,-21,12,-1,7,4,-13, 
  /* [8][0][][] */ 127,70,43,105,14,-24,104,-93, 
  /* [9][0][][] */ -92,-6,4,127,-19,6,61,16, 
  /* [10][0][][] */ -11,-108,12,41,51,127,-110,-57, 
  /* [11][0][][] */ -127,29,27,-93,18,-54,31,-8, 
  /* [12][0][][] */ 43,13,-23,57,-127,-45,-9,29, 
  /* [13][0][][] */ -26,72,-127,18,4,60,-29,2, 
  /* [14][0][][] */ -27,-77,-11,127,12,65,20,-14, 
  /* [15][0][][] */ 1,127,10,-1,-34,2,-8,-49, 
  /* [16][0][][] */ -127,-107,-34,-14,-17,-90,111,-4, 
  /* [17][0][][] */ -19,91,-17,14,-18,88,-127,-62, 
  /* [18][0][][] */ 53,54,-120,-64,127,90,-52,52, 
  /* [19][0][][] */ -127,-14,-38,-41,-60,53,16,17, 
  /* [20][0][][] */ -127,4,12,69,-25,-53,69,32, 
  /* [21][0][][] */ -127,5,-31,32,-91,-61,12,0, 
  /* [22][0][][] */ -127,-27,31,36,85,0,-24,33, 
  /* [23][0][][] */ 22,-37,27,4,8,106,-127,-93, 
  /* [24][0][][] */ -4,27,-127,6,1,46,1,41, 
  /* [25][0][][] */ 62,45,15,127,-36,5,18,-33, 
  /* [26][0][][] */ 15,-25,37,-8,-43,127,116,3, 
  /* [27][0][][] */ 127,-43,-110,74,86,27,-12,-100, 
  /* [28][0][][] */ -30,127,-4,-10,73,46,21,80, 
  /* [29][0][][] */ 53,12,6,-8,8,83,-127,-80, 
  /* [30][0][][] */ 23,-3,-8,-127,-27,-34,-12,-3, 
  /* [31][0][][] */ -66,9,42,12,-127,-23,64,-10, 
  /* [32][0][][] */ 50,7,125,-127,18,49,-57,-3, 
  /* [33][0][][] */ -92,-9,-54,-116,-127,27,45,-28, 
  /* [34][0][][] */ -127,21,-9,-2,9,-31,33,28, 
  /* [35][0][][] */ -35,127,-1,-2,71,-38,73,22, 
  /* [36][0][][] */ 38,19,85,-74,-2,127,-109,-9, 
  /* [37][0][][] */ 24,-83,4,-18,35,-127,85,32, 
  /* [38][0][][] */ -27,-127,-19,-47,19,51,-82,13, 
  /* [39][0][][] */ -11,-127,-45,-24,-18,-27,-58,-105, 
  /* [40][0][][] */ 78,61,127,15,-70,97,-47,-30, 
  /* [41][0][][] */ -34,-18,45,4,30,85,-7,127, 
  /* [42][0][][] */ 43,-7,-36,-127,-79,-53,26,-40, 
  /* [43][0][][] */ -1,-26,-32,-127,-5,-18,-12,-56, 
  /* [44][0][][] */ -2,34,44,34,1,90,127,-3, 
  /* [45][0][][] */ 6,-127,63,-44,60,39,31,28, 
  /* [46][0][][] */ -66,39,127,86,67,10,36,80, 
  /* [47][0][][] */ 25,-21,44,127,32,-23,28,23, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00019529937708284706, 0.00062447652453556657, 0.00037582407821901143, 0.0011512087658047676, 0.0027342101093381643, 0.00065194308990612626, 0.0027604228816926479, 0.0027695780154317617, 0.0013707471080124378, 0.00089099624892696738, 0.0014827612321823835, 0.00075028633000329137, 0.0012632212601602077, 0.0013699921546503901, 0.0011824329849332571, 0.0044327550567686558, 0.00050518248463049531, 0.00070888351183384657, 0.0026099276728928089, 0.00035695702536031604, 0.00057139870477840304, 0.00036139620351605117, 0.00079323240788653493, 0.001752009498886764, 0.00072897667996585369, 0.00058073777472600341, 0.00050095777260139585, 0.00050988898146897554, 0.001948032877407968, 0.0019309530034661293, 0.0013839502353221178, 0.0008276000153273344, 0.0018702064407989383, 0.00060240377206355333, 0.00065908825490623713, 0.00058310467284172773, 0.00088851893087849021, 0.00083309854380786419, 0.00012535147834569216, 0.0041516441851854324, 0.0017197482520714402, 0.0033932642545551062, 0.00043749471660703421, 0.0011312712449580431, 0.00036702101351693273, 0.00082537962589412928, 0.0012424819869920611, 0.0016715567326173186, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { -4866, -14584, 35639, 18627, -1470, 6617, 51171, 9120, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00052192364819347858, 0.00064834818476811051, 0.00055327883455902338, 0.0010933313751593232, 0.00079136580461636186, 0.00093733862740918994, 0.00047975784400478005, 0.00050333322724327445, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -22,-6,14,-127,34,-9,6,-7,4,-2,10,-31,110,0,3,1,0,-17,3,6,93,0,3,2,31,46,11,20,14,2,0,-126,29,-5,-22,4,-1,20,12,29,5,-40,-17,-1,-6,-3,1,22, 
  /* [1][0][][] */ -54,-3,-8,11,16,17,-47,99,27,6,-53,-23,-23,0,14,22,0,35,-4,-55,-27,24,127,9,-35,-7,55,-2,16,-21,13,-68,11,-2,-40,-24,9,-17,13,9,-5,-16,-79,0,-87,7,-44,-70, 
  /* [2][0][][] */ -82,-13,-18,13,111,64,14,20,-11,61,-24,6,20,0,39,120,0,26,-127,26,20,-7,49,-45,-40,-51,42,-1,25,56,76,24,-36,-23,-15,6,-2,5,-47,9,82,13,-54,17,56,-58,66,-4, 
  /* [3][0][][] */ 3,19,12,16,-32,9,16,29,45,0,-24,13,13,0,-13,9,0,4,-3,2,-2,6,1,5,3,-7,-8,-9,14,-9,14,4,-51,22,-70,3,4,17,-12,-127,-14,7,-10,-24,-6,1,-14,-12, 
  /* [4][0][][] */ 6,-11,100,40,13,2,-12,-30,8,3,16,13,-61,0,4,21,0,-8,-7,-8,55,-21,21,-11,-7,14,35,23,0,-16,17,73,-20,13,-7,9,47,-9,-8,-15,-21,-127,11,-1,-25,-2,-4,-5, 
  /* [5][0][][] */ -18,58,-3,-35,-18,64,49,18,-48,44,-13,68,34,0,-127,-3,0,14,-32,26,10,-1,14,18,-22,-11,24,-2,15,29,14,-12,35,31,-85,3,17,15,-76,27,51,-25,-7,26,52,73,42,16, 
  /* [6][0][][] */ -29,-32,4,8,91,-52,-7,35,-14,-8,-69,127,-49,0,-121,32,0,2,54,-41,-42,5,20,-69,56,-18,-49,-19,72,6,10,-21,122,-54,30,30,23,-13,-93,-52,2,8,-46,-31,-18,-100,-33,-110, 
  /* [7][0][][] */ -73,-27,15,19,127,49,33,32,20,9,18,0,-38,0,48,106,0,31,10,82,-24,1,-31,36,22,-23,23,3,75,52,55,-2,-15,-12,7,-9,-5,8,4,28,79,13,-39,-15,7,-1,53,38, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.022181754931807518, 0.027554797008633614, 0.023514349013566971, 0.046466581523418427, 0.033633045852184296, 0.039836890995502472, 0.020389707759022713, 0.021391661837697029, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 48695, 71778, 72888, 49370, 1211, 10214, -1045, 47152, 41789, 42829, 37515, -14481, -50606, -127, 79358, 1723, -204, 63522, 9343, 2209, -16606, -8807, 46978, 45082, 26743, 81497, 88141, 15274, -1104, 8111, -5367, -54438, 16439, 100693, 22075, 4848, 81095, -1104, 165123, -42762, 3386, -29506, 3039, 105576, -6230, 99783, 1589, -21752, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 0.00012445378524716944, 5.2564999350579455e-05, 0.00016246057930402458, 0.0001377186126774177, 0.00015847463509999216, 0.00015815570077393204, 0.00016410274838563055, 3.9266160456463695e-05, 5.36740044481121e-05, 1.3559277249441948e-05, 5.289795808494091e-05, 2.8648419174714945e-05, 0.00014694806304760277, 0.005541567225009203, 3.4864406188717112e-05, 0.0002052931668004021, 0.0027484172023832798, 9.4900842668721452e-06, 3.1574003514833748e-05, 0.00022873598209116608, 9.1198380687274039e-05, 7.9282261140178889e-05, 0.00012031363439746201, 1.9442477423581295e-05, 3.3604595955694094e-05, 3.2384345104219392e-05, 1.2847253856307361e-05, 3.1279731047106907e-05, 0.00022633255866821855, 5.418457294581458e-05, 5.0150352763012052e-05, 0.00016714735829737037, 0.00017122976714745164, 6.3893653532431927e-06, 9.4896327937021852e-05, 8.8984517788048834e-05, 7.9290102803497575e-06, 0.00060142343863844872, 2.7337511710356921e-05, 9.5028321084100753e-05, 7.7178490755613893e-05, 0.00021260126959532499, 8.6992316937539726e-05, 4.636116045730887e-06, 0.00012611606507562101, 5.9955858887406066e-05, 0.00014845350233372301, 6.1642356740776449e-05, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -41,-32,-9,-23,10,-32,-77,-77,-18,-62,-19,54,37,-71,111,-47,-113,-93,34,2,7,-70,-114,-82,-38,-124,-59,-23,71,26,95,33,-127,-89,-9,55,27,55,-127,81,-75,-16,78,-114,7,-40,-86,105, 77,-10,-33,-41,58,-127,-127,-83,68,-89,-127,100,41,-82,-5,67,-52,-126,59,9,12,-109,-127,-62,-2,-127,-125,-50,-58,30,-60,57,28,-127,68,80,21,82,-94,127,-127,7,99,-125,6,-20,-127,89, -30,25,-2,-14,-72,-107,-64,-14,89,-32,-118,42,15,-71,-101,-7,-127,-16,21,10,-1,-73,-36,-26,-12,-24,-57,-8,-15,27,-27,15,105,-93,74,34,12,37,2,16,-76,9,-3,-66,-16,4,-57,4, 
  /* [0][1][][] */ -85,-127,-38,-35,-11,66,103,-106,-11,-121,-46,109,95,-64,26,-103,-121,-105,90,-76,47,-82,-101,-127,33,-103,-79,-40,127,-59,127,90,-51,-76,-15,100,-29,-77,-103,109,59,57,105,-111,-87,-117,79,127, 127,-89,-127,-127,127,50,97,-127,116,-127,-111,127,127,-14,-10,127,-60,-127,127,-127,127,-127,-126,-122,127,-77,-127,-127,-121,-127,-75,127,25,-101,122,127,-76,-127,-92,103,79,127,127,-127,-108,-127,120,120, -52,16,-70,-87,-127,-20,27,-34,127,-42,-77,49,60,-70,-24,-42,-37,-14,54,-76,64,-84,-45,-29,42,-11,-53,-50,13,-92,-37,23,21,-97,127,26,-50,-71,8,-14,53,56,24,-68,-56,-42,60,36, 
  /* [0][2][][] */ -58,-107,-42,-39,-3,47,3,-40,-33,-61,-13,63,85,-127,-127,-68,-43,-5,61,76,53,-34,-19,-66,28,-47,-15,-56,71,40,76,71,107,-21,-38,-4,-90,39,-15,52,23,45,24,-55,97,-86,5,29, 90,-78,-96,-96,80,28,15,-48,53,-71,-29,59,85,-26,14,90,-24,-29,78,113,81,-43,-18,-52,96,-77,-21,-102,-57,49,-51,114,-14,-47,64,-8,-127,56,-22,19,24,35,30,-76,127,-105,-15,41, -26,22,-54,-42,-85,-10,23,-11,49,-17,0,42,37,-43,113,-29,-93,3,31,54,82,-27,3,4,32,-13,-7,-52,-20,40,-23,44,-87,-34,66,0,-34,14,30,-28,19,37,5,-6,62,-36,-7,17, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0052892859093844891, 0.0022340123541653156, 0.0069045745767652988, 0.0058530410751700401, 0.0067351716570556164, 0.0067216171883046627, 0.0069743664935231209, 0.0016688117757439613, 0.0022811451926827431, 0.00057626928901299834, 0.0022481631021946669, 0.0012175578158348799, 0.0062452922575175762, 0.23551659286022186, 0.0014817372430115938, 0.0087249595671892166, 0.1168077290058136, 0.00040332856588065624, 0.0013418950838968158, 0.0097212791442871094, 0.0038759310264140368, 0.0033694959711283445, 0.0051133292727172375, 0.00082630530232563615, 0.0014281952753663063, 0.0013763345777988434, 0.00054600829025730491, 0.0013293885858729482, 0.0096191335469484329, 0.0023028443101793528, 0.0021313899196684361, 0.0071037625893950462, 0.007277265191078186, 0.00027154802228324115, 0.0040330938063561916, 0.0037818420678377151, 0.00033698292099870741, 0.025560496374964714, 0.0011618442367762327, 0.004038703627884388, 0.0032800857443362474, 0.0090355537831783295, 0.0036971734371036291, 0.00019703492580447346, 0.0053599327802658081, 0.0025481239426881075, 0.0063092736527323723, 0.0026198001578450203, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 6503, -256, 12784, 12030, 6165, 6249, 8070, -86, 94, -216, 5133, 358, 14460, -75184048, 4330, 17642, -60692468, -131, -131, 8572, 3554, -38, -568, 261, 3142, -580, -95, 416, 3709, 1048, 2778, 18411, 1215, 265, -119, -4405, 424, 10553, -121, 11277, 1713, 11576, -3, -91, 9866, -8, 6549, 2535, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00035675504477694631, 0.00079377699876204133, 0.00027069626958109438, 0.00016507841064594686, 0.00031857812427915633, 0.00035598335671238601, 0.00051208923105150461, 0.001420562039129436, 0.00062717817490920424, 0.0040160221979022026, 0.00037683697883039713, 0.0021710249129682779, 0.00015900054131634533, 2.1571551211962969e-09, 0.00059122120728716254, 0.00018787941371556371, 2.1571551211962969e-09, 0.0057837697677314281, 0.00073737639468163252, 0.00047618881217204034, 0.00030964016332291067, 0.0049698124639689922, 0.00037958423490636051, 0.0019801610615104437, 0.0011748535325750709, 0.00095327332383021712, 0.0020558391697704792, 0.0021341652609407902, 0.00028418703004717827, 0.0024533616378903389, 0.0011527773458510637, 0.00013099194620735943, 0.00051635154522955418, 0.011696095578372478, 0.00060470093740150332, 0.00030380097450688481, 0.0031826251652091742, 0.00013930357818026096, 0.0032118032686412334, 0.00031144008971750736, 0.0014212935930117965, 0.0001977034262381494, 0.00061386777088046074, 0.011706022545695305, 0.00047538362559862435, 0.00060459919041022658, 0.00033993145916610956, 0.00031093860161490738, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 36,-127,31,-38,34,2,-89,33, 
  /* [1][0][][] */ -12,41,-35,-127,36,21,-48,67, 
  /* [2][0][][] */ 2,-11,-21,99,38,127,6,70, 
  /* [3][0][][] */ 117,40,-54,127,-109,12,-53,46, 
  /* [4][0][][] */ -75,-120,60,35,47,45,-15,-127, 
  /* [5][0][][] */ -32,-6,10,34,-86,-71,27,127, 
  /* [6][0][][] */ 17,1,-87,-127,91,46,0,31, 
  /* [7][0][][] */ 127,43,-18,0,-16,-49,63,-17, 
  /* [8][0][][] */ -73,-85,-3,114,19,45,-12,-127, 
  /* [9][0][][] */ 56,-127,2,-18,-14,24,-81,60, 
  /* [10][0][][] */ -100,-100,-127,-25,100,74,-106,74, 
  /* [11][0][][] */ -21,-44,-25,-83,-127,-19,37,-17, 
  /* [12][0][][] */ 68,-1,-24,90,-87,-32,13,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ 5,-82,35,-7,96,127,69,25, 
  /* [15][0][][] */ 10,-22,-25,-97,127,41,-52,102, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 1,41,127,47,-68,-72,29,-9, 
  /* [18][0][][] */ -25,-127,-36,-5,8,35,-98,-7, 
  /* [19][0][][] */ -127,-1,-14,17,-69,-17,-101,56, 
  /* [20][0][][] */ 95,0,-53,105,-61,-127,-20,39, 
  /* [21][0][][] */ 62,0,127,-13,-42,-33,77,26, 
  /* [22][0][][] */ -44,-17,-127,-3,9,16,-46,9, 
  /* [23][0][][] */ -63,82,-46,13,-39,-18,127,-87, 
  /* [24][0][][] */ 0,-81,-108,78,-30,-34,127,122, 
  /* [25][0][][] */ 11,30,20,36,127,83,-45,-46, 
  /* [26][0][][] */ -127,-26,-103,-24,-6,-5,-42,-26, 
  /* [27][0][][] */ 3,-36,-19,1,6,127,35,40, 
  /* [28][0][][] */ -7,-18,29,42,88,127,6,29, 
  /* [29][0][][] */ 44,4,127,27,38,15,81,-11, 
  /* [30][0][][] */ -86,20,43,4,-58,-43,127,-105, 
  /* [31][0][][] */ -96,-127,-28,-30,107,-77,127,108, 
  /* [32][0][][] */ -3,22,-38,84,-1,35,127,21, 
  /* [33][0][][] */ 35,47,-50,-100,-27,-2,20,127, 
  /* [34][0][][] */ -28,43,-14,-127,18,2,-5,111, 
  /* [35][0][][] */ 112,-2,-127,-78,120,48,70,-119, 
  /* [36][0][][] */ -127,-4,37,56,44,82,-69,96, 
  /* [37][0][][] */ 16,-25,51,61,-21,96,57,127, 
  /* [38][0][][] */ 14,10,-8,50,127,9,-5,22, 
  /* [39][0][][] */ 25,58,35,-127,16,-19,-42,77, 
  /* [40][0][][] */ 76,33,127,46,-25,-3,65,2, 
  /* [41][0][][] */ -4,-22,-23,47,57,127,19,73, 
  /* [42][0][][] */ -25,-2,127,0,-36,-25,-22,24, 
  /* [43][0][][] */ -21,-31,-10,70,1,-17,26,-127, 
  /* [44][0][][] */ 121,58,-53,-57,127,-51,-4,-37, 
  /* [45][0][][] */ -108,45,-34,-23,25,35,73,-127, 
  /* [46][0][][] */ -127,-1,44,27,-96,37,-115,57, 
  /* [47][0][][] */ 86,-22,127,16,18,-79,97,36, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.00065111101139336824, 0.0014487166190519929, 0.00049404578749090433, 0.00030128340586088598, 0.00058143463684245944, 0.00064970261882990599, 0.00093461037613451481, 0.0025926574598997831, 0.0011446583084762096, 0.0073296125046908855, 0.00068776245461776853, 0.0039623216725885868, 0.00029019074281677604, 3.937008052901092e-09, 0.0010790334781631827, 0.00034289734321646392, 3.937008052901092e-09, 0.010555916465818882, 0.0013457803288474679, 0.00086908874800428748, 0.00056512199807912111, 0.0090703684836626053, 0.0006927764043211937, 0.0036139774601906538, 0.0021442165598273277, 0.0017398121999576688, 0.0037520972546190023, 0.0038950494490563869, 0.00051866768626496196, 0.0044776126742362976, 0.0021039254497736692, 0.00023907244030851871, 0.00094238948076963425, 0.021346459165215492, 0.0011036352952942252, 0.00055446493206545711, 0.0058085862547159195, 0.00025424195337109268, 0.0058618388138711452, 0.00056840706383809447, 0.0025939925108104944, 0.00036082707811146975, 0.0011203655740246177, 0.021364577114582062, 0.00086761917918920517, 0.0011034496128559113, 0.00062040641205385327, 0.00056749180657789111, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { -9084, -51316, -16298, -14228, -33878, -7192, 634, -24348, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0018672086298465729, 0.0011688933009281754, 0.002098805271089077, 0.0011408098507672548, 0.0013261330313980579, 0.0019626489374786615, 0.001429672003723681, 0.0015880865976214409, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-26,3,16,127,3,12,8,-8,-84,-75,-6,0,96,-18,0, 
  /* [1][0][][] */ 0,-63,2,106,127,25,23,14,10,-1,107,-67,0,69,-20,0, 
  /* [2][0][][] */ 0,18,1,-10,-31,2,17,0,6,40,-5,-8,0,127,-36,0, 
  /* [3][0][][] */ 0,14,-2,-127,99,5,78,7,8,65,-11,46,0,-4,17,0, 
  /* [4][0][][] */ 0,19,12,53,-81,10,127,1,-9,-86,55,15,0,-2,24,0, 
  /* [5][0][][] */ 0,-2,-7,1,-17,-20,4,4,-5,14,-4,-26,0,2,127,0, 
  /* [6][0][][] */ 0,6,-17,-33,18,-15,-44,-5,9,-127,100,65,0,102,31,0, 
  /* [7][0][][] */ 0,21,-6,127,7,9,-8,4,-8,66,-59,40,0,3,26,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.079356364905834198, 0.049677964299917221, 0.08919922262430191, 0.048484418541193008, 0.056360654532909393, 0.083412580192089081, 0.060761060565710068, 0.067493677139282227, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { -161, 38495, 958976, 6612, 2706, 1059410, 13884, 222129, -6943, 5716, 30889, 12376, -445, 25013, 7336, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 7.7822034654673189e-05, 4.3659742914314847e-06, 0.00051731569692492485, 0.00025624860427342355, 3.093619852734264e-06, 0.00037022528704255819, 1.734062607283704e-05, 1.9356728444108739e-05, 0.00035534522612579167, 0.00017651656526140869, 0.00070702523225918412, 0.00072724185883998871, 0.0002618627913761884, 0.0002101235295413062, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,20,-81,-126,40,-67,79,75,-89,-3,-9,29,-127,5,55,-73, 51,27,-127,127,127,-127,127,127,-84,127,-127,53,-105,6,127,-25, 24,-23,93,-2,-69,70,-96,-81,-94,-27,4,-16,61,2,-100,-29, 
  /* [0][1][][] */ -127,127,-21,14,-41,15,-30,-17,-28,0,3,-112,-49,8,-28,-14, -78,-39,-57,-14,-5,-25,7,26,-108,-90,21,-6,-104,-127,2,23, 14,2,66,2,5,36,-26,-36,-127,6,-1,1,-21,12,-3,43, 
  /* [0][2][][] */ -115,-71,71,3,-4,38,-40,-55,-76,0,-1,6,40,2,-25,23, 23,-3,33,-1,-24,40,-35,-23,-125,-13,-1,87,-58,1,-27,-111, 21,-6,20,1,6,15,8,-25,-115,4,0,-127,107,4,18,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0033074363600462675, 0.00018555390124674886, 0.021985916420817375, 0.010890564881265163, 0.00013147883873898536, 0.01573457382619381, 0.00073697656625881791, 0.00082266092067584395, 0.015102171339094639, 0.0075019537471234798, 0.030048571527004242, 0.030907778069376945, 0.011129168793559074, 0.0089302500709891319, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 21830, -98083, 19619, 39159, 38179, 32686, 16978, -336134, 16685, 26288, 1305398, -1073741824, 21293, 40207, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00023347187379840761, 0.00021579148597083986, 2.2879230527905747e-05, 6.335875514196232e-05, 0.0002296381862834096, 7.3895309469662607e-05, 0.00036179099697619677, 6.6070101638615597e-06, 5.5451469961553812e-05, 0.00015527666255366057, 4.5619513002748135e-06, 1.1533876076441629e-09, 0.00015912510571070015, 9.2047121142968535e-05, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 43,-15,47, 0,-33,36, -103,-127,-29, 
  /* [1][1][][] */ 6,-20,18, -14,-18,16, -7,-64,22, 
  /* [1][2][][] */ -2,-6,13, -3,-21,14, 24,-54,25, 
  /* [2][0][][] */ 44,-8,-15, 121,112,1, 17,-52,-24, 
  /* [2][1][][] */ 33,12,-8, 112,127,-25, -1,-18,-36, 
  /* [2][2][][] */ 85,-61,15, 127,-34,-13, 17,-65,-3, 
  /* [3][0][][] */ 5,96,81, 30,127,84, 0,19,14, 
  /* [3][1][][] */ 13,64,80, 40,108,84, -16,-13,22, 
  /* [3][2][][] */ -25,7,62, -28,-22,56, -2,4,23, 
  /* [4][0][][] */ -10,60,-110, -22,63,-111, -2,76,-59, 
  /* [4][1][][] */ 3,103,-56, -3,127,-66, 49,113,-52, 
  /* [4][2][][] */ 2,80,-82, 1,96,-81, 3,84,-32, 
  /* [5][0][][] */ 10,-28,-104, 2,-26,-80, 6,23,1, 
  /* [5][1][][] */ 3,-75,-127, -2,-76,-109, 4,-4,-5, 
  /* [5][2][][] */ 1,-17,-12, 7,-21,2, 12,13,20, 
  /* [6][0][][] */ 25,-86,34, 56,-99,45, -6,-42,-2, 
  /* [6][1][][] */ 54,-109,58, 94,-127,78, 5,-44,9, 
  /* [6][2][][] */ 59,-38,27, 72,-29,50, 8,5,7, 
  /* [7][0][][] */ -47,20,5, -127,-31,10, -22,39,18, 
  /* [7][1][][] */ -24,-3,0, -127,-83,-3, -5,11,17, 
  /* [7][2][][] */ -44,36,-14, -22,22,3, -27,39,7, 
  /* [8][0][][] */ 127,127,124, 126,127,124, 126,127,123, 
  /* [8][1][][] */ 126,127,123, 126,127,124, 126,126,122, 
  /* [8][2][][] */ 126,126,79, 126,126,114, 126,126,-99, 
  /* [9][0][][] */ 16,27,29, 20,20,13, 40,22,-3, 
  /* [9][1][][] */ 127,108,17, 82,104,21, 24,6,51, 
  /* [9][2][][] */ -67,-59,-11, -43,-74,-31, -17,-29,-36, 
  /* [10][0][][] */ -23,-79,-26, 35,96,12, -6,-8,-9, 
  /* [10][1][][] */ -57,-99,-23, 78,127,5, -15,-23,-9, 
  /* [10][2][][] */ -31,-18,-9, 36,23,-22, -7,1,-3, 
  /* [11][0][][] */ 2,-9,13, 22,-26,17, 0,-104,-59, 
  /* [11][1][][] */ -37,-32,-7, -26,-50,-24, -25,-67,-60, 
  /* [11][2][][] */ -61,-90,-127, 58,68,9, -88,-38,-95, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -46,-112,-18, -57,-127,-26, 1,-26,-3, 
  /* [13][1][][] */ 74,113,17, 70,127,27, 19,9,14, 
  /* [13][2][][] */ -1,-29,4, 10,-28,-1, 11,-3,-2, 
  /* [14][0][][] */ 43,-31,-30, 73,-55,-44, 41,-29,-15, 
  /* [14][1][][] */ 97,-28,-63, 127,-57,-82, 70,-33,-34, 
  /* [14][2][][] */ 70,-18,-44, 83,-36,-56, 41,-22,-23, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.059535324573516846, 0.055026825517416, 0.0058342032134532928, 0.016156481578946114, 0.05855773389339447, 0.018843302503228188, 0.092256702482700348, 0.0016847874503582716, 0.014140124432742596, 0.039595548063516617, 0.0011632975656539202, 2.9411381774480105e-07, 0.040576901286840439, 0.02347201481461525, 3.1706054670621597e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.54791736602783203, } };
const TfArray<1, int> quant46_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.4417780339717865, } };
const TfArray<1, int> quant50_zero = { 1, { 22 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.59998351335525513, } };
const TfArray<1, int> quant53_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.62499499320983887, } };
const TfArray<1, int> quant54_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.25332459807395935, } };
const TfArray<1, int> quant58_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.23097799718379974, } };
const TfArray<1, int> quant61_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.29408949613571167, } };
const TfArray<1, int> quant62_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.28206369280815125, } };
const TfArray<1, int> quant65_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.43281924724578857, } };
const TfArray<1, int> quant66_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.10500463098287582, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.1584465354681015, } };
const TfArray<1, int> quant69_zero = { 1, { -28 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 432), (TfLiteIntArray*)&g0::tensor_dimension69, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
